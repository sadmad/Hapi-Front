{
  "version": 3,
  "sources": ["../../@refinedev/react-hook-form/src/useForm/index.ts", "../../@refinedev/react-hook-form/src/useStepsForm/index.ts", "../../@refinedev/react-hook-form/src/useModalForm/index.ts", "../../lodash-es/_baseHas.js", "../../lodash-es/has.js"],
  "sourcesContent": ["import React, { useEffect } from \"react\";\nimport get from \"lodash-es/get.js\";\nimport has from \"lodash-es/has.js\";\n\nimport {\n  useForm as useHookForm,\n  type UseFormProps as UseHookFormProps,\n  type UseFormReturn,\n  type FieldValues,\n  type UseFormHandleSubmit,\n  type Path,\n} from \"react-hook-form\";\nimport {\n  type BaseRecord,\n  type HttpError,\n  useForm as useFormCore,\n  useWarnAboutChange,\n  type UseFormProps as UseFormCoreProps,\n  type UseFormReturnType as UseFormReturnTypeCore,\n  useTranslate,\n  useRefineContext,\n  flattenObjectKeys,\n} from \"@refinedev/core\";\n\nexport type UseFormReturnType<\n  TQueryFnData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n  TVariables extends FieldValues = FieldValues,\n  TContext extends object = {},\n  TData extends BaseRecord = TQueryFnData,\n  TResponse extends BaseRecord = TData,\n  TResponseError extends HttpError = TError,\n> = UseFormReturn<TVariables, TContext> & {\n  refineCore: UseFormReturnTypeCore<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n  >;\n  saveButtonProps: {\n    disabled: boolean;\n    onClick: (e: React.BaseSyntheticEvent) => void;\n  };\n};\n\nexport type UseFormProps<\n  TQueryFnData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n  TVariables extends FieldValues = FieldValues,\n  TContext extends object = {},\n  TData extends BaseRecord = TQueryFnData,\n  TResponse extends BaseRecord = TData,\n  TResponseError extends HttpError = TError,\n> = {\n  /**\n   * Configuration object for the core of the [useForm](/docs/api-reference/core/hooks/useForm/)\n   * @type [`UseFormCoreProps<TQueryFnData, TError, TVariables, TData, TResponse, TResponseError>`](/docs/api-reference/core/hooks/useForm/#properties)\n   */\n  refineCoreProps?: UseFormCoreProps<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n  >;\n  /**\n   * When you have unsaved changes and try to leave the current page, **refine** shows a confirmation modal box.\n   * @default `false*`\n   */\n  warnWhenUnsavedChanges?: boolean;\n  /**\n   * Disables server-side validation\n   * @default false\n   * @see {@link https://refine.dev/docs/advanced-tutorials/forms/server-side-form-validation/}\n   */\n  disableServerSideValidation?: boolean;\n} & UseHookFormProps<TVariables, TContext>;\n\nexport const useForm = <\n  TQueryFnData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n  TVariables extends FieldValues = FieldValues,\n  TContext extends object = {},\n  TData extends BaseRecord = TQueryFnData,\n  TResponse extends BaseRecord = TData,\n  TResponseError extends HttpError = TError,\n>({\n  refineCoreProps,\n  warnWhenUnsavedChanges: warnWhenUnsavedChangesProp,\n  disableServerSideValidation: disableServerSideValidationProp = false,\n  ...rest\n}: UseFormProps<\n  TQueryFnData,\n  TError,\n  TVariables,\n  TContext,\n  TData,\n  TResponse,\n  TResponseError\n> = {}): UseFormReturnType<\n  TQueryFnData,\n  TError,\n  TVariables,\n  TContext,\n  TData,\n  TResponse,\n  TResponseError\n> => {\n  const { options } = useRefineContext();\n  const disableServerSideValidation =\n    options?.disableServerSideValidation || disableServerSideValidationProp;\n\n  const translate = useTranslate();\n\n  const { warnWhenUnsavedChanges: warnWhenUnsavedChangesRefine, setWarnWhen } =\n    useWarnAboutChange();\n  const warnWhenUnsavedChanges =\n    warnWhenUnsavedChangesProp ?? warnWhenUnsavedChangesRefine;\n\n  const useHookFormResult = useHookForm<TVariables, TContext>({\n    ...rest,\n  });\n\n  const {\n    watch,\n    setValue,\n    getValues,\n    handleSubmit: handleSubmitReactHookForm,\n    setError,\n  } = useHookFormResult;\n\n  const useFormCoreResult = useFormCore<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n  >({\n    ...refineCoreProps,\n    onMutationError: (error, _variables, _context) => {\n      if (disableServerSideValidation) {\n        refineCoreProps?.onMutationError?.(error, _variables, _context);\n        return;\n      }\n\n      const errors = error?.errors;\n\n      for (const key in errors) {\n        // when the key is not registered in the form, react-hook-form not working\n        const isKeyInVariables = Object.keys(\n          flattenObjectKeys(_variables),\n        ).includes(key);\n\n        if (!isKeyInVariables) {\n          continue;\n        }\n\n        const fieldError = errors[key];\n\n        let newError = \"\";\n\n        if (Array.isArray(fieldError)) {\n          newError = fieldError.join(\" \");\n        }\n\n        if (typeof fieldError === \"string\") {\n          newError = fieldError;\n        }\n\n        if (typeof fieldError === \"boolean\" && fieldError) {\n          newError = \"Field is not valid.\";\n        }\n\n        if (typeof fieldError === \"object\" && \"key\" in fieldError) {\n          const translatedMessage = translate(\n            fieldError.key,\n            fieldError.message,\n          );\n\n          newError = translatedMessage;\n        }\n\n        setError(key as Path<TVariables>, {\n          message: newError,\n        });\n      }\n\n      refineCoreProps?.onMutationError?.(error, _variables, _context);\n    },\n  });\n\n  const { query, onFinish, formLoading, onFinishAutoSave } = useFormCoreResult;\n\n  useEffect(() => {\n    const data = query?.data?.data;\n    if (!data) return;\n\n    /**\n     * get registered fields from react-hook-form\n     */\n    const registeredFields = Object.keys(flattenObjectKeys(getValues()));\n\n    /**\n     * set values from query result as default values\n     */\n    registeredFields.forEach((path) => {\n      const hasValue = has(data, path);\n      const dataValue = get(data, path);\n\n      /**\n       * set value if the path exists in the query result even if the value is null\n       */\n      if (hasValue) {\n        setValue(path as Path<TVariables>, dataValue);\n      }\n    });\n  }, [query?.data, setValue, getValues]);\n\n  useEffect(() => {\n    const subscription = watch((values: any, { type }: { type?: any }) => {\n      if (type === \"change\") {\n        onValuesChange(values);\n      }\n    });\n    return () => subscription.unsubscribe();\n  }, [watch]);\n\n  const onValuesChange = (changeValues: TVariables) => {\n    if (warnWhenUnsavedChanges) {\n      setWarnWhen(true);\n    }\n\n    if (refineCoreProps?.autoSave) {\n      setWarnWhen(false);\n\n      const onFinishProps =\n        refineCoreProps.autoSave?.onFinish ?? ((values: TVariables) => values);\n\n      return onFinishAutoSave(onFinishProps(changeValues)).catch(\n        (error) => error,\n      );\n    }\n\n    return changeValues;\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TVariables> =\n    (onValid, onInvalid) => async (e) => {\n      setWarnWhen(false);\n      return handleSubmitReactHookForm(onValid, onInvalid)(e);\n    };\n\n  const saveButtonProps = {\n    disabled: formLoading,\n    onClick: (e: React.BaseSyntheticEvent) => {\n      handleSubmit(\n        (v) => onFinish(v).catch(() => {}),\n        () => false,\n      )(e);\n    },\n  };\n\n  return {\n    ...useHookFormResult,\n    handleSubmit,\n    refineCore: useFormCoreResult,\n    saveButtonProps,\n  };\n};\n", "import { useEffect, useState } from \"react\";\nimport type { FieldValues, Path } from \"react-hook-form\";\nimport type { BaseRecord, HttpError } from \"@refinedev/core\";\nimport get from \"lodash-es/get.js\";\n\nimport { useForm, type UseFormProps, type UseFormReturnType } from \"../useForm\";\n\nexport type UseStepsFormReturnType<\n  TQueryFnData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n  TVariables extends FieldValues = FieldValues,\n  TContext extends object = {},\n  TData extends BaseRecord = TQueryFnData,\n  TResponse extends BaseRecord = TData,\n  TResponseError extends HttpError = TError,\n> = UseFormReturnType<\n  TQueryFnData,\n  TError,\n  TVariables,\n  TContext,\n  TData,\n  TResponse,\n  TResponseError\n> & {\n  steps: {\n    currentStep: number;\n    gotoStep: (step: number) => void;\n  };\n};\n\nexport type UseStepsFormProps<\n  TQueryFnData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n  TVariables extends FieldValues = FieldValues,\n  TContext extends object = {},\n  TData extends BaseRecord = TQueryFnData,\n  TResponse extends BaseRecord = TData,\n  TResponseError extends HttpError = TError,\n> = UseFormProps<\n  TQueryFnData,\n  TError,\n  TVariables,\n  TContext,\n  TData,\n  TResponse,\n  TResponseError\n> & {\n  /**\n     * @description Configuration object for the steps.\n     * `defaultStep`: Allows you to set the initial step.\n     * \n     * `isBackValidate`: Whether to validation the current step when going back.\n     * @type `{\n      defaultStep?: number;\n      isBackValidate?: boolean;\n      }`\n     * @default `defaultStep = 0` `isBackValidate = false`\n     */\n  stepsProps?: {\n    defaultStep?: number;\n    isBackValidate?: boolean;\n  };\n};\n\nexport const useStepsForm = <\n  TQueryFnData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n  TVariables extends FieldValues = FieldValues,\n  TContext extends object = {},\n  TData extends BaseRecord = TQueryFnData,\n  TResponse extends BaseRecord = TData,\n  TResponseError extends HttpError = TError,\n>({\n  stepsProps,\n  ...rest\n}: UseStepsFormProps<\n  TQueryFnData,\n  TError,\n  TVariables,\n  TContext,\n  TData,\n  TResponse,\n  TResponseError\n> = {}): UseStepsFormReturnType<\n  TQueryFnData,\n  TError,\n  TVariables,\n  TContext,\n  TData,\n  TResponse,\n  TResponseError\n> => {\n  const { defaultStep = 0, isBackValidate = false } = stepsProps ?? {};\n  const [current, setCurrent] = useState(defaultStep);\n\n  const useHookFormResult = useForm<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TContext,\n    TData,\n    TResponse,\n    TResponseError\n  >({\n    ...rest,\n  });\n\n  const {\n    trigger,\n    getValues,\n    setValue,\n    formState: { dirtyFields },\n    refineCore: { query },\n  } = useHookFormResult;\n\n  useEffect(() => {\n    const data = query?.data?.data;\n    if (!data) return;\n\n    const registeredFields = Object.keys(getValues());\n\n    console.log({\n      dirtyFields,\n      registeredFields,\n      data,\n    });\n\n    Object.entries(data).forEach(([key, value]) => {\n      const name = key as Path<TVariables>;\n\n      if (registeredFields.includes(name)) {\n        if (!get(dirtyFields, name)) {\n          setValue(name, value);\n        }\n      }\n    });\n  }, [query?.data, current, setValue, getValues]);\n\n  const go = (step: number) => {\n    let targetStep = step;\n\n    if (step < 0) {\n      targetStep = 0;\n    }\n\n    setCurrent(targetStep);\n  };\n\n  const gotoStep = async (step: number) => {\n    if (step === current) {\n      return;\n    }\n\n    if (step < current && !isBackValidate) {\n      go(step);\n      return;\n    }\n\n    const isValid = await trigger();\n    if (isValid) {\n      go(step);\n    }\n  };\n\n  return {\n    ...useHookFormResult,\n    steps: {\n      currentStep: current,\n      gotoStep,\n    },\n  };\n};\n", "import { useCallback } from \"react\";\nimport {\n  type BaseKey,\n  type BaseRecord,\n  type FormWithSyncWithLocationParams,\n  type HttpError,\n  useGo,\n  useModal,\n  useParsed,\n  useResource,\n  useUserFriendlyName,\n  useTranslate,\n  useWarnAboutChange,\n  useInvalidate,\n} from \"@refinedev/core\";\nimport type { FieldValues } from \"react-hook-form\";\n\nimport { useForm, type UseFormProps, type UseFormReturnType } from \"../useForm\";\nimport React from \"react\";\n\nexport type UseModalFormReturnType<\n  TQueryFnData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n  TVariables extends FieldValues = FieldValues,\n  TContext extends object = {},\n  TData extends BaseRecord = TQueryFnData,\n  TResponse extends BaseRecord = TData,\n  TResponseError extends HttpError = TError,\n> = UseFormReturnType<\n  TQueryFnData,\n  TError,\n  TVariables,\n  TContext,\n  TData,\n  TResponse,\n  TResponseError\n> & {\n  modal: {\n    submit: (values: TVariables) => void;\n    close: () => void;\n    show: (id?: BaseKey) => void;\n    visible: boolean;\n    title: string;\n  };\n};\n\nexport type UseModalFormProps<\n  TQueryFnData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n  TVariables extends FieldValues = FieldValues,\n  TContext extends object = {},\n  TData extends BaseRecord = TQueryFnData,\n  TResponse extends BaseRecord = TData,\n  TResponseError extends HttpError = TError,\n> = UseFormProps<\n  TQueryFnData,\n  TError,\n  TVariables,\n  TContext,\n  TData,\n  TResponse,\n  TResponseError\n> & {\n  /**\n     * @description Configuration object for the modal.\n     * `defaultVisible`: Initial visibility state of the modal.\n     * \n     * `autoSubmitClose`: Whether the form should be submitted when the modal is closed.\n     * \n     * `autoResetForm`: Whether the form should be reset when the form is submitted.\n     * @type `{\n      defaultVisible?: boolean;\n      autoSubmitClose?: boolean;\n      autoResetForm?: boolean;\n      }`\n     * @default `defaultVisible = false` `autoSubmitClose = true` `autoResetForm = true`\n     */\n  modalProps?: {\n    defaultVisible?: boolean;\n    autoSubmitClose?: boolean;\n    autoResetForm?: boolean;\n  };\n} & FormWithSyncWithLocationParams;\n\nexport const useModalForm = <\n  TQueryFnData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n  TVariables extends FieldValues = FieldValues,\n  TContext extends object = {},\n  TData extends BaseRecord = TQueryFnData,\n  TResponse extends BaseRecord = TData,\n  TResponseError extends HttpError = TError,\n>({\n  modalProps,\n  refineCoreProps,\n  syncWithLocation,\n  ...rest\n}: UseModalFormProps<\n  TQueryFnData,\n  TError,\n  TVariables,\n  TContext,\n  TData,\n  TResponse,\n  TResponseError\n> = {}): UseModalFormReturnType<\n  TQueryFnData,\n  TError,\n  TVariables,\n  TContext,\n  TData,\n  TResponse,\n  TResponseError\n> => {\n  const invalidate = useInvalidate();\n  const [initiallySynced, setInitiallySynced] = React.useState(false);\n\n  const translate = useTranslate();\n\n  const { resource: resourceProp, action: actionProp } = refineCoreProps ?? {};\n\n  const {\n    resource,\n    action: actionFromParams,\n    identifier,\n  } = useResource(resourceProp);\n\n  const parsed = useParsed();\n  const go = useGo();\n  const getUserFriendlyName = useUserFriendlyName();\n\n  const action = actionProp ?? actionFromParams ?? \"\";\n\n  const syncingId = !(\n    typeof syncWithLocation === \"object\" && syncWithLocation?.syncId === false\n  );\n\n  const syncWithLocationKey =\n    typeof syncWithLocation === \"object\" && \"key\" in syncWithLocation\n      ? syncWithLocation.key\n      : resource && action && syncWithLocation\n        ? `modal-${identifier}-${action}`\n        : undefined;\n\n  const {\n    defaultVisible = false,\n    autoSubmitClose = true,\n    autoResetForm = true,\n  } = modalProps ?? {};\n\n  const useHookFormResult = useForm<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TContext,\n    TData,\n    TResponse,\n    TResponseError\n  >({\n    refineCoreProps: {\n      ...refineCoreProps,\n      meta: {\n        ...(syncWithLocationKey ? { [syncWithLocationKey]: undefined } : {}),\n        ...refineCoreProps?.meta,\n      },\n    },\n    ...rest,\n  });\n\n  const {\n    reset,\n    refineCore: { onFinish, id, setId, autoSaveProps },\n    saveButtonProps,\n    handleSubmit,\n  } = useHookFormResult;\n\n  const { visible, show, close } = useModal({\n    defaultVisible,\n  });\n\n  React.useEffect(() => {\n    if (initiallySynced === false && syncWithLocationKey) {\n      const openStatus = parsed?.params?.[syncWithLocationKey]?.open;\n      if (typeof openStatus === \"boolean\") {\n        if (openStatus) {\n          show();\n        }\n      } else if (typeof openStatus === \"string\") {\n        if (openStatus === \"true\") {\n          show();\n        }\n      }\n\n      if (syncingId) {\n        const idFromParams = parsed?.params?.[syncWithLocationKey]?.id;\n        if (idFromParams) {\n          setId?.(idFromParams);\n        }\n      }\n\n      setInitiallySynced(true);\n    }\n  }, [syncWithLocationKey, parsed, syncingId, setId]);\n\n  React.useEffect(() => {\n    if (initiallySynced === true) {\n      if (visible && syncWithLocationKey) {\n        go({\n          query: {\n            [syncWithLocationKey]: {\n              ...parsed?.params?.[syncWithLocationKey],\n              open: true,\n              ...(syncingId && id && { id }),\n            },\n          },\n          options: { keepQuery: true },\n          type: \"replace\",\n        });\n      } else if (syncWithLocationKey && !visible) {\n        go({\n          query: {\n            [syncWithLocationKey]: undefined,\n          },\n          options: { keepQuery: true },\n          type: \"replace\",\n        });\n      }\n    }\n  }, [id, visible, show, syncWithLocationKey, syncingId]);\n\n  const submit = async (values: TVariables) => {\n    await onFinish(values);\n\n    if (autoSubmitClose) {\n      close();\n    }\n\n    if (autoResetForm) {\n      reset();\n    }\n  };\n\n  const { warnWhen, setWarnWhen } = useWarnAboutChange();\n  const handleClose = useCallback(() => {\n    if (\n      autoSaveProps.status === \"success\" &&\n      refineCoreProps?.autoSave?.invalidateOnClose\n    ) {\n      invalidate({\n        id,\n        invalidates: refineCoreProps.invalidates || [\"list\", \"many\", \"detail\"],\n        dataProviderName: refineCoreProps.dataProviderName,\n        resource: identifier,\n      });\n    }\n\n    if (warnWhen) {\n      const warnWhenConfirm = window.confirm(\n        translate(\n          \"warnWhenUnsavedChanges\",\n          \"Are you sure you want to leave? You have unsaved changes.\",\n        ),\n      );\n\n      if (warnWhenConfirm) {\n        setWarnWhen(false);\n      } else {\n        return;\n      }\n    }\n\n    setId?.(undefined);\n    close();\n  }, [warnWhen, autoSaveProps.status]);\n\n  const handleShow = useCallback(\n    (showId?: BaseKey) => {\n      if (typeof showId !== \"undefined\") {\n        setId?.(showId);\n      }\n      const needsIdToOpen = action === \"edit\" || action === \"clone\";\n      const hasId = typeof showId !== \"undefined\" || typeof id !== \"undefined\";\n      if (needsIdToOpen ? hasId : true) {\n        show();\n      }\n    },\n    [id],\n  );\n\n  const title = translate(\n    `${identifier}.titles.${actionProp}`,\n    undefined,\n    `${getUserFriendlyName(\n      `${actionProp} ${\n        resource?.meta?.label ??\n        resource?.options?.label ??\n        resource?.label ??\n        identifier\n      }`,\n      \"singular\",\n    )}`,\n  );\n\n  return {\n    modal: {\n      submit,\n      close: handleClose,\n      show: handleShow,\n      visible,\n      title,\n    },\n    ...useHookFormResult,\n    saveButtonProps: {\n      ...saveButtonProps,\n      onClick: (e) => handleSubmit(submit)(e),\n    },\n  };\n};\n", "/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.has` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHas(object, key) {\n  return object != null && hasOwnProperty.call(object, key);\n}\n\nexport default baseHas;\n", "import baseHas from './_baseHas.js';\nimport hasPath from './_hasPath.js';\n\n/**\n * Checks if `path` is a direct property of `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = { 'a': { 'b': 2 } };\n * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.has(object, 'a');\n * // => true\n *\n * _.has(object, 'a.b');\n * // => true\n *\n * _.has(object, ['a', 'b']);\n * // => true\n *\n * _.has(other, 'a');\n * // => false\n */\nfunction has(object, path) {\n  return object != null && hasPath(object, path, baseHas);\n}\n\nexport default has;\n"],
  "mappings": "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",
  "names": ["import_react", "import_react", "import_react", "useForm", "__name", "refineCoreProps", "warnWhenUnsavedChangesProp", "disableServerSideValidationProp", "rest", "options", "useRefineContext", "disableServerSideValidation", "translate", "useTranslate", "warnWhenUnsavedChangesRefine", "setWarnWhen", "useWarnAboutChange", "warnWhenUnsavedChanges", "useHookFormResult", "useHookForm", "watch", "setValue", "getValues", "handleSubmitReactHookForm", "setError", "useFormCoreResult", "useFormCore", "error", "_variables", "_context", "_a", "_b", "errors", "key", "flattenObjectKeys", "fieldError", "newError", "query", "onFinish", "formLoading", "onFinishAutoSave", "useEffect", "data", "path", "hasValue", "has", "dataValue", "get", "subscription", "values", "type", "onValuesChange", "changeValues", "onFinishProps", "handleSubmit", "onValid", "onInvalid", "e", "v", "useStepsForm", "stepsProps", "defaultStep", "isBackValidate", "current", "setCurrent", "useState", "trigger", "dirtyFields", "registeredFields", "value", "name", "go", "step", "targetStep", "useModalForm", "modalProps", "syncWithLocation", "invalidate", "useInvalidate", "initiallySynced", "setInitiallySynced", "React", "resourceProp", "actionProp", "resource", "actionFromParams", "identifier", "useResource", "parsed", "useParsed", "useGo", "getUserFriendlyName", "useUserFriendlyName", "action", "syncingId", "syncWithLocationKey", "defaultVisible", "autoSubmitClose", "autoResetForm", "reset", "id", "setId", "autoSaveProps", "saveButtonProps", "visible", "show", "close", "useModal", "_c", "_d", "openStatus", "idFromParams", "submit", "warnWhen", "handleClose", "useCallback", "handleShow", "showId", "title"]
}
