"use client"
var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// src/index.tsx
import {
  SnackbarProvider as SnackbarProvider2,
  withSnackbar,
  SnackbarContent,
  useSnackbar as useSnackbar2
} from "notistack";

// src/components/layout/index.tsx
import React3 from "react";
import Box2 from "@mui/material/Box";

// src/components/layout/sider/index.tsx
import React, { useState } from "react";
import Box from "@mui/material/Box";
import Drawer from "@mui/material/Drawer";
import List from "@mui/material/List";
import ListItemButton from "@mui/material/ListItemButton";
import ListItemIcon from "@mui/material/ListItemIcon";
import ListItemText from "@mui/material/ListItemText";
import Collapse from "@mui/material/Collapse";
import Tooltip from "@mui/material/Tooltip";
import Button from "@mui/material/Button";
import IconButton from "@mui/material/IconButton";
import ListOutlined from "@mui/icons-material/esm/ListOutlined";
import Logout from "@mui/icons-material/esm/Logout";
import ExpandLess from "@mui/icons-material/esm/ExpandLess";
import ExpandMore from "@mui/icons-material/esm/ExpandMore";
import ChevronLeft from "@mui/icons-material/esm/ChevronLeft";
import ChevronRight from "@mui/icons-material/esm/ChevronRight";
import MenuRounded from "@mui/icons-material/esm/MenuRounded";
import Dashboard from "@mui/icons-material/esm/Dashboard";
import {
  CanAccess,
  useIsExistAuthentication,
  useLogout,
  useTitle,
  useTranslate,
  useRouterContext,
  useRouterType,
  useLink,
  useMenu,
  useRefineContext,
  useActiveAuthProvider,
  pickNotDeprecated,
  useWarnAboutChange
} from "@refinedev/core";
var Sider = /* @__PURE__ */ __name(({
  Title: TitleFromProps,
  render,
  meta
}) => {
  const [collapsed, setCollapsed] = useState(false);
  const [opened, setOpened] = useState(false);
  const drawerWidth = /* @__PURE__ */ __name(() => {
    if (collapsed)
      return 64;
    return 200;
  }, "drawerWidth");
  const t = useTranslate();
  const routerType = useRouterType();
  const Link6 = useLink();
  const { Link: LegacyLink } = useRouterContext();
  const ActiveLink = routerType === "legacy" ? LegacyLink : Link6;
  const { hasDashboard } = useRefineContext();
  const translate = useTranslate();
  const { warnWhen, setWarnWhen } = useWarnAboutChange();
  const { menuItems, selectedKey, defaultOpenKeys } = useMenu({ meta });
  const isExistAuthentication = useIsExistAuthentication();
  const TitleFromContext = useTitle();
  const authProvider = useActiveAuthProvider();
  const { mutate: mutateLogout } = useLogout({
    v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)
  });
  const [open, setOpen] = useState({});
  React.useEffect(() => {
    setOpen((previous) => {
      const previousKeys = Object.keys(previous);
      const previousOpenKeys = previousKeys.filter((key) => previous[key]);
      const uniqueKeys = /* @__PURE__ */ new Set([...previousOpenKeys, ...defaultOpenKeys]);
      const uniqueKeysRecord = Object.fromEntries(
        Array.from(uniqueKeys.values()).map((key) => [key, true])
      );
      return uniqueKeysRecord;
    });
  }, [defaultOpenKeys]);
  const RenderToTitle = TitleFromProps ?? TitleFromContext ?? Title;
  const handleClick = /* @__PURE__ */ __name((key) => {
    setOpen({ ...open, [key]: !open[key] });
  }, "handleClick");
  const renderTreeView = /* @__PURE__ */ __name((tree, selectedKey2) => {
    return tree.map((item) => {
      const { icon, label, route, name, children, parentName, meta: meta2, options } = item;
      const isOpen = open[item.key || ""] || false;
      const isSelected = item.key === selectedKey2;
      const isNested = !(pickNotDeprecated(meta2 == null ? void 0 : meta2.parent, options == null ? void 0 : options.parent, parentName) === void 0);
      if (children.length > 0) {
        return /* @__PURE__ */ React.createElement(
          CanAccess,
          {
            key: item.key,
            resource: name,
            action: "list",
            params: {
              resource: item
            }
          },
          /* @__PURE__ */ React.createElement("div", { key: item.key }, /* @__PURE__ */ React.createElement(
            Tooltip,
            {
              title: label ?? name,
              placement: "right",
              disableHoverListener: !collapsed,
              arrow: true
            },
            /* @__PURE__ */ React.createElement(
              ListItemButton,
              {
                onClick: () => {
                  if (collapsed) {
                    setCollapsed(false);
                    if (!isOpen) {
                      handleClick(item.key || "");
                    }
                  } else {
                    handleClick(item.key || "");
                  }
                },
                sx: {
                  pl: isNested ? 4 : 2,
                  justifyContent: "center",
                  "&.Mui-selected": {
                    "&:hover": {
                      backgroundColor: "transparent"
                    },
                    backgroundColor: "transparent"
                  }
                }
              },
              /* @__PURE__ */ React.createElement(
                ListItemIcon,
                {
                  sx: {
                    justifyContent: "center",
                    minWidth: 36,
                    color: "secondary.contrastText"
                  }
                },
                icon ?? /* @__PURE__ */ React.createElement(ListOutlined, null)
              ),
              /* @__PURE__ */ React.createElement(
                ListItemText,
                {
                  primary: label,
                  primaryTypographyProps: {
                    noWrap: true,
                    fontSize: "14px",
                    fontWeight: isSelected ? "bold" : "normal"
                  }
                }
              ),
              !collapsed && (isOpen ? /* @__PURE__ */ React.createElement(ExpandLess, null) : /* @__PURE__ */ React.createElement(ExpandMore, null))
            )
          ), !collapsed && /* @__PURE__ */ React.createElement(
            Collapse,
            {
              in: open[item.key || ""],
              timeout: "auto",
              unmountOnExit: true
            },
            /* @__PURE__ */ React.createElement(List, { component: "div", disablePadding: true }, renderTreeView(children, selectedKey2))
          ))
        );
      }
      return /* @__PURE__ */ React.createElement(
        CanAccess,
        {
          key: item.key,
          resource: name,
          action: "list",
          params: { resource: item }
        },
        /* @__PURE__ */ React.createElement(
          Tooltip,
          {
            title: label ?? name,
            placement: "right",
            disableHoverListener: !collapsed,
            arrow: true
          },
          /* @__PURE__ */ React.createElement(
            ListItemButton,
            {
              component: ActiveLink,
              to: route,
              selected: isSelected,
              onClick: () => {
                setOpened(false);
              },
              sx: {
                pl: isNested ? 4 : 2,
                py: isNested ? 1.25 : 1,
                "&.Mui-selected": {
                  "&:hover": {
                    backgroundColor: "transparent"
                  },
                  backgroundColor: "transparent"
                },
                justifyContent: "center"
              }
            },
            /* @__PURE__ */ React.createElement(
              ListItemIcon,
              {
                sx: {
                  justifyContent: "center",
                  minWidth: 36,
                  color: "secondary.contrastText"
                }
              },
              icon ?? /* @__PURE__ */ React.createElement(ListOutlined, null)
            ),
            /* @__PURE__ */ React.createElement(
              ListItemText,
              {
                primary: label,
                primaryTypographyProps: {
                  noWrap: true,
                  fontSize: "14px",
                  fontWeight: isSelected ? "bold" : "normal"
                }
              }
            )
          )
        )
      );
    });
  }, "renderTreeView");
  const dashboard = hasDashboard ? /* @__PURE__ */ React.createElement(CanAccess, { resource: "dashboard", action: "list" }, /* @__PURE__ */ React.createElement(
    Tooltip,
    {
      title: translate("dashboard.title", "Dashboard"),
      placement: "right",
      disableHoverListener: !collapsed,
      arrow: true
    },
    /* @__PURE__ */ React.createElement(
      ListItemButton,
      {
        component: ActiveLink,
        to: "/",
        selected: selectedKey === "/",
        onClick: () => {
          setOpened(false);
        },
        sx: {
          pl: 2,
          py: 1,
          "&.Mui-selected": {
            "&:hover": {
              backgroundColor: "transparent"
            },
            backgroundColor: "transparent"
          },
          justifyContent: "center"
        }
      },
      /* @__PURE__ */ React.createElement(
        ListItemIcon,
        {
          sx: {
            justifyContent: "center",
            minWidth: 36,
            color: "secondary.contrastText"
          }
        },
        /* @__PURE__ */ React.createElement(Dashboard, null)
      ),
      /* @__PURE__ */ React.createElement(
        ListItemText,
        {
          primary: translate("dashboard.title", "Dashboard"),
          primaryTypographyProps: {
            noWrap: true,
            fontSize: "14px",
            fontWeight: selectedKey === "/" ? "bold" : "normal"
          }
        }
      )
    )
  )) : null;
  const handleLogout = /* @__PURE__ */ __name(() => {
    if (warnWhen) {
      const confirm = window.confirm(
        translate(
          "warnWhenUnsavedChanges",
          "Are you sure you want to leave? You have unsaved changes."
        )
      );
      if (confirm) {
        setWarnWhen(false);
        mutateLogout();
      }
    } else {
      mutateLogout();
    }
  }, "handleLogout");
  const logout = isExistAuthentication && /* @__PURE__ */ React.createElement(
    Tooltip,
    {
      title: t("buttons.logout", "Logout"),
      placement: "right",
      disableHoverListener: !collapsed,
      arrow: true
    },
    /* @__PURE__ */ React.createElement(
      ListItemButton,
      {
        key: "logout",
        onClick: handleLogout,
        sx: { justifyContent: "center" }
      },
      /* @__PURE__ */ React.createElement(
        ListItemIcon,
        {
          sx: {
            justifyContent: "center",
            minWidth: 36,
            color: "secondary.contrastText"
          }
        },
        /* @__PURE__ */ React.createElement(Logout, null)
      ),
      /* @__PURE__ */ React.createElement(
        ListItemText,
        {
          primary: t("buttons.logout", "Logout"),
          primaryTypographyProps: {
            noWrap: true,
            fontSize: "14px"
          }
        }
      )
    )
  );
  const items = renderTreeView(menuItems, selectedKey);
  const renderSider = /* @__PURE__ */ __name(() => {
    if (render) {
      return render({
        dashboard,
        logout,
        items,
        collapsed
      });
    }
    return /* @__PURE__ */ React.createElement(React.Fragment, null, dashboard, items, logout);
  }, "renderSider");
  const drawer = /* @__PURE__ */ React.createElement(List, { disablePadding: true, sx: { mt: 1, color: "secondary.contrastText" } }, renderSider());
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    Box,
    {
      sx: {
        width: { xs: drawerWidth() },
        display: {
          xs: "none",
          md: "block"
        },
        transition: "width 0.3s ease"
      }
    }
  ), /* @__PURE__ */ React.createElement(
    Box,
    {
      component: "nav",
      sx: {
        position: "fixed",
        zIndex: 1101,
        width: { sm: drawerWidth() },
        display: "flex"
      }
    },
    /* @__PURE__ */ React.createElement(
      Drawer,
      {
        variant: "temporary",
        open: opened,
        onClose: () => setOpened(false),
        ModalProps: {
          keepMounted: true
          // Better open performance on mobile.
        },
        sx: {
          display: { sm: "block", md: "none" },
          "& .MuiDrawer-paper": {
            width: 256,
            bgcolor: "secondary.main"
          }
        }
      },
      /* @__PURE__ */ React.createElement(
        Box,
        {
          sx: {
            height: 64,
            display: "flex",
            alignItems: "center",
            justifyContent: "center"
          }
        },
        /* @__PURE__ */ React.createElement(RenderToTitle, { collapsed: false })
      ),
      drawer
    ),
    /* @__PURE__ */ React.createElement(
      Drawer,
      {
        variant: "permanent",
        PaperProps: { elevation: 1 },
        sx: {
          display: { xs: "none", md: "block" },
          "& .MuiDrawer-paper": {
            width: drawerWidth,
            bgcolor: "secondary.main",
            overflow: "hidden",
            transition: "width 200ms cubic-bezier(0.4, 0, 0.6, 1) 0ms"
          }
        },
        open: true
      },
      /* @__PURE__ */ React.createElement(
        Box,
        {
          sx: {
            height: 64,
            display: "flex",
            alignItems: "center",
            justifyContent: "center"
          }
        },
        /* @__PURE__ */ React.createElement(RenderToTitle, { collapsed })
      ),
      /* @__PURE__ */ React.createElement(
        Box,
        {
          sx: {
            flexGrow: 1,
            overflowX: "hidden",
            overflowY: "auto"
          }
        },
        drawer
      ),
      /* @__PURE__ */ React.createElement(
        Button,
        {
          sx: {
            background: "rgba(0,0,0,.5)",
            color: "secondary.contrastText",
            textAlign: "center",
            borderRadius: 0,
            borderTop: "1px solid #ffffff1a"
          },
          fullWidth: true,
          size: "large",
          onClick: () => setCollapsed((prev) => !prev)
        },
        collapsed ? /* @__PURE__ */ React.createElement(ChevronRight, null) : /* @__PURE__ */ React.createElement(ChevronLeft, null)
      )
    ),
    /* @__PURE__ */ React.createElement(
      Box,
      {
        sx: {
          display: { xs: "block", md: "none" },
          position: "fixed",
          top: "64px",
          left: "0px",
          borderRadius: "0 6px 6px 0",
          bgcolor: "secondary.main",
          zIndex: 1199,
          width: "36px"
        }
      },
      /* @__PURE__ */ React.createElement(
        IconButton,
        {
          sx: { color: "#fff", width: "36px" },
          onClick: () => setOpened((prev) => !prev)
        },
        /* @__PURE__ */ React.createElement(MenuRounded, null)
      )
    )
  ));
}, "Sider");

// src/components/layout/header/index.tsx
import React2 from "react";
import { useGetIdentity, useActiveAuthProvider as useActiveAuthProvider2 } from "@refinedev/core";
import AppBar from "@mui/material/AppBar";
import Stack from "@mui/material/Stack";
import Toolbar from "@mui/material/Toolbar";
import Typography from "@mui/material/Typography";
import Avatar from "@mui/material/Avatar";
var Header = /* @__PURE__ */ __name(() => {
  const authProvider = useActiveAuthProvider2();
  const { data: user } = useGetIdentity({
    v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)
  });
  const shouldRenderHeader = user && (user.name || user.avatar);
  return shouldRenderHeader ? /* @__PURE__ */ React2.createElement(AppBar, { color: "default", position: "sticky", elevation: 1 }, /* @__PURE__ */ React2.createElement(Toolbar, null, /* @__PURE__ */ React2.createElement(
    Stack,
    {
      direction: "row",
      width: "100%",
      justifyContent: "flex-end",
      alignItems: "center"
    },
    /* @__PURE__ */ React2.createElement(
      Stack,
      {
        direction: "row",
        gap: "16px",
        alignItems: "center",
        justifyContent: "center"
      },
      /* @__PURE__ */ React2.createElement(Typography, { variant: "subtitle2" }, user == null ? void 0 : user.name),
      /* @__PURE__ */ React2.createElement(Avatar, { src: user == null ? void 0 : user.avatar, alt: user == null ? void 0 : user.name })
    )
  ))) : null;
}, "Header");

// src/components/layout/index.tsx
var Layout = /* @__PURE__ */ __name(({
  Sider: Sider2,
  Header: Header2,
  Title: Title2,
  Footer,
  OffLayoutArea,
  children
}) => {
  const SiderToRender = Sider2 ?? Sider;
  const HeaderToRender = Header2 ?? Header;
  return /* @__PURE__ */ React3.createElement(Box2, { display: "flex", flexDirection: "row" }, /* @__PURE__ */ React3.createElement(SiderToRender, { Title: Title2 }), /* @__PURE__ */ React3.createElement(
    Box2,
    {
      sx: {
        display: "flex",
        flexDirection: "column",
        flex: 1,
        minHeight: "100vh"
      }
    },
    /* @__PURE__ */ React3.createElement(HeaderToRender, null),
    /* @__PURE__ */ React3.createElement(
      Box2,
      {
        component: "main",
        sx: {
          p: { xs: 1, md: 2, lg: 3 },
          flexGrow: 1,
          bgcolor: (theme) => theme.palette.background.default
        }
      },
      children
    ),
    Footer && /* @__PURE__ */ React3.createElement(Footer, null)
  ), OffLayoutArea && /* @__PURE__ */ React3.createElement(OffLayoutArea, null));
}, "Layout");

// src/components/layout/title/index.tsx
import React4 from "react";
import {
  useRouterContext as useRouterContext2,
  useLink as useLink2,
  useRouterType as useRouterType2
} from "@refinedev/core";
import Button2 from "@mui/material/Button";
var Title = /* @__PURE__ */ __name(({ collapsed }) => {
  const routerType = useRouterType2();
  const Link6 = useLink2();
  const { Link: LegacyLink } = useRouterContext2();
  const ActiveLink = routerType === "legacy" ? LegacyLink : Link6;
  return /* @__PURE__ */ React4.createElement(Button2, { fullWidth: true, variant: "text", disableRipple: true }, /* @__PURE__ */ React4.createElement(ActiveLink, { to: "/" }, collapsed ? /* @__PURE__ */ React4.createElement(
    "img",
    {
      src: "https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine-mini.svg",
      alt: "Refine",
      width: "28px",
      style: { maxHeight: "38px" }
    }
  ) : /* @__PURE__ */ React4.createElement(
    "img",
    {
      src: "https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine.svg",
      alt: "Refine",
      width: "140px"
    }
  )));
}, "Title");

// src/components/themedLayout/index.tsx
import React7, { useState as useState3 } from "react";
import Box4 from "@mui/material/Box";

// src/components/themedLayout/sider/index.tsx
import React5, { useState as useState2 } from "react";
import Box3 from "@mui/material/Box";
import Drawer2 from "@mui/material/Drawer";
import List2 from "@mui/material/List";
import ListItemButton2 from "@mui/material/ListItemButton";
import ListItemIcon2 from "@mui/material/ListItemIcon";
import ListItemText2 from "@mui/material/ListItemText";
import Collapse2 from "@mui/material/Collapse";
import Tooltip2 from "@mui/material/Tooltip";
import IconButton2 from "@mui/material/IconButton";
import Paper from "@mui/material/Paper";
import ListOutlined2 from "@mui/icons-material/esm/ListOutlined";
import Logout2 from "@mui/icons-material/esm/Logout";
import ExpandLess2 from "@mui/icons-material/esm/ExpandLess";
import ExpandMore2 from "@mui/icons-material/esm/ExpandMore";
import ChevronLeft2 from "@mui/icons-material/esm/ChevronLeft";
import MenuRounded2 from "@mui/icons-material/esm/MenuRounded";
import Dashboard2 from "@mui/icons-material/esm/Dashboard";
import {
  CanAccess as CanAccess2,
  useIsExistAuthentication as useIsExistAuthentication2,
  useLogout as useLogout2,
  useTitle as useTitle2,
  useTranslate as useTranslate2,
  useRouterContext as useRouterContext3,
  useRouterType as useRouterType3,
  useLink as useLink3,
  useMenu as useMenu2,
  useRefineContext as useRefineContext2,
  useActiveAuthProvider as useActiveAuthProvider3,
  pickNotDeprecated as pickNotDeprecated2,
  useWarnAboutChange as useWarnAboutChange2
} from "@refinedev/core";
var ThemedSider = /* @__PURE__ */ __name(({
  Title: TitleFromProps,
  render,
  meta,
  isSiderOpen,
  onToggleSiderClick
}) => {
  const [opened, setOpened] = useState2(false);
  const drawerWidth = /* @__PURE__ */ __name(() => {
    if (isSiderOpen)
      return 240;
    return 56;
  }, "drawerWidth");
  const t = useTranslate2();
  const routerType = useRouterType3();
  const Link6 = useLink3();
  const { Link: LegacyLink } = useRouterContext3();
  const ActiveLink = routerType === "legacy" ? LegacyLink : Link6;
  const { hasDashboard } = useRefineContext2();
  const translate = useTranslate2();
  const { menuItems, selectedKey, defaultOpenKeys } = useMenu2({ meta });
  const isExistAuthentication = useIsExistAuthentication2();
  const TitleFromContext = useTitle2();
  const authProvider = useActiveAuthProvider3();
  const { warnWhen, setWarnWhen } = useWarnAboutChange2();
  const { mutate: mutateLogout } = useLogout2({
    v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)
  });
  const [open, setOpen] = useState2({});
  React5.useEffect(() => {
    setOpen((previous) => {
      const previousKeys = Object.keys(previous);
      const previousOpenKeys = previousKeys.filter((key) => previous[key]);
      const uniqueKeys = /* @__PURE__ */ new Set([...previousOpenKeys, ...defaultOpenKeys]);
      const uniqueKeysRecord = Object.fromEntries(
        Array.from(uniqueKeys.values()).map((key) => [key, true])
      );
      return uniqueKeysRecord;
    });
  }, [defaultOpenKeys]);
  const RenderToTitle = TitleFromProps ?? TitleFromContext ?? ThemedTitle;
  const handleClick = /* @__PURE__ */ __name((key) => {
    setOpen({ ...open, [key]: !open[key] });
  }, "handleClick");
  const renderTreeView = /* @__PURE__ */ __name((tree, selectedKey2) => {
    return tree.map((item) => {
      const { icon, label, route, name, children, parentName, meta: meta2, options } = item;
      const isOpen = open[item.key || ""] || false;
      const isSelected = item.key === selectedKey2;
      const isNested = !(pickNotDeprecated2(meta2 == null ? void 0 : meta2.parent, options == null ? void 0 : options.parent, parentName) === void 0);
      if (children.length > 0) {
        return /* @__PURE__ */ React5.createElement(
          CanAccess2,
          {
            key: item.key,
            resource: name,
            action: "list",
            params: {
              resource: item
            }
          },
          /* @__PURE__ */ React5.createElement("div", { key: item.key }, /* @__PURE__ */ React5.createElement(
            Tooltip2,
            {
              title: label ?? name,
              placement: "right",
              disableHoverListener: isSiderOpen,
              arrow: true
            },
            /* @__PURE__ */ React5.createElement(
              ListItemButton2,
              {
                onClick: () => {
                  if (!isSiderOpen) {
                    onToggleSiderClick == null ? void 0 : onToggleSiderClick(true);
                    if (!isOpen) {
                      handleClick(item.key || "");
                    }
                  } else {
                    handleClick(item.key || "");
                  }
                },
                sx: {
                  pl: isNested ? 4 : 2,
                  justifyContent: "center",
                  marginTop: "8px"
                }
              },
              /* @__PURE__ */ React5.createElement(
                ListItemIcon2,
                {
                  sx: {
                    justifyContent: "center",
                    minWidth: "24px",
                    transition: "margin-right 0.3s",
                    marginRight: isSiderOpen ? "12px" : "0px",
                    color: "currentColor"
                  }
                },
                icon ?? /* @__PURE__ */ React5.createElement(ListOutlined2, null)
              ),
              /* @__PURE__ */ React5.createElement(
                ListItemText2,
                {
                  primary: label,
                  primaryTypographyProps: {
                    noWrap: true,
                    fontSize: "14px"
                  }
                }
              ),
              isOpen ? /* @__PURE__ */ React5.createElement(
                ExpandLess2,
                {
                  sx: {
                    color: "text.icon"
                  }
                }
              ) : /* @__PURE__ */ React5.createElement(
                ExpandMore2,
                {
                  sx: {
                    color: "text.icon"
                  }
                }
              )
            )
          ), isSiderOpen && /* @__PURE__ */ React5.createElement(
            Collapse2,
            {
              in: open[item.key || ""],
              timeout: "auto",
              unmountOnExit: true
            },
            /* @__PURE__ */ React5.createElement(List2, { component: "div", disablePadding: true }, renderTreeView(children, selectedKey2))
          ))
        );
      }
      return /* @__PURE__ */ React5.createElement(
        CanAccess2,
        {
          key: item.key,
          resource: name,
          action: "list",
          params: { resource: item }
        },
        /* @__PURE__ */ React5.createElement(
          Tooltip2,
          {
            title: label ?? name,
            placement: "right",
            disableHoverListener: isSiderOpen,
            arrow: true
          },
          /* @__PURE__ */ React5.createElement(
            ListItemButton2,
            {
              component: ActiveLink,
              to: route,
              selected: isSelected,
              onClick: () => {
                setOpened(false);
              },
              sx: {
                pl: isNested ? 4 : 2,
                py: isNested ? 1.25 : 1,
                justifyContent: "center",
                color: isSelected ? "primary.main" : "text.primary"
              }
            },
            /* @__PURE__ */ React5.createElement(
              ListItemIcon2,
              {
                sx: {
                  justifyContent: "center",
                  transition: "margin-right 0.3s",
                  marginRight: isSiderOpen ? "12px" : "0px",
                  minWidth: "24px",
                  color: "currentColor"
                }
              },
              icon ?? /* @__PURE__ */ React5.createElement(ListOutlined2, null)
            ),
            /* @__PURE__ */ React5.createElement(
              ListItemText2,
              {
                primary: label,
                primaryTypographyProps: {
                  noWrap: true,
                  fontSize: "14px"
                }
              }
            )
          )
        )
      );
    });
  }, "renderTreeView");
  const dashboard = hasDashboard ? /* @__PURE__ */ React5.createElement(CanAccess2, { resource: "dashboard", action: "list" }, /* @__PURE__ */ React5.createElement(
    Tooltip2,
    {
      title: translate("dashboard.title", "Dashboard"),
      placement: "right",
      disableHoverListener: isSiderOpen,
      arrow: true
    },
    /* @__PURE__ */ React5.createElement(
      ListItemButton2,
      {
        component: ActiveLink,
        to: "/",
        selected: selectedKey === "/",
        onClick: () => {
          setOpened(false);
        },
        sx: {
          pl: 2,
          py: 1,
          justifyContent: "center",
          color: selectedKey === "/" ? "primary.main" : "text.primary"
        }
      },
      /* @__PURE__ */ React5.createElement(
        ListItemIcon2,
        {
          sx: {
            justifyContent: "center",
            minWidth: "24px",
            transition: "margin-right 0.3s",
            marginRight: isSiderOpen ? "12px" : "0px",
            color: "currentColor",
            fontSize: "14px"
          }
        },
        /* @__PURE__ */ React5.createElement(Dashboard2, null)
      ),
      /* @__PURE__ */ React5.createElement(
        ListItemText2,
        {
          primary: translate("dashboard.title", "Dashboard"),
          primaryTypographyProps: {
            noWrap: true,
            fontSize: "14px"
          }
        }
      )
    )
  )) : null;
  const handleLogout = /* @__PURE__ */ __name(() => {
    if (warnWhen) {
      const confirm = window.confirm(
        t(
          "warnWhenUnsavedChanges",
          "Are you sure you want to leave? You have unsaved changes."
        )
      );
      if (confirm) {
        setWarnWhen(false);
        mutateLogout();
      }
    } else {
      mutateLogout();
    }
  }, "handleLogout");
  const logout = isExistAuthentication && /* @__PURE__ */ React5.createElement(
    Tooltip2,
    {
      title: t("buttons.logout", "Logout"),
      placement: "right",
      disableHoverListener: isSiderOpen,
      arrow: true
    },
    /* @__PURE__ */ React5.createElement(
      ListItemButton2,
      {
        key: "logout",
        onClick: () => handleLogout(),
        sx: {
          justifyContent: "center"
        }
      },
      /* @__PURE__ */ React5.createElement(
        ListItemIcon2,
        {
          sx: {
            justifyContent: "center",
            minWidth: "24px",
            transition: "margin-right 0.3s",
            marginRight: isSiderOpen ? "12px" : "0px",
            marginLeft: "2px",
            color: "currentColor"
          }
        },
        /* @__PURE__ */ React5.createElement(Logout2, null)
      ),
      /* @__PURE__ */ React5.createElement(
        ListItemText2,
        {
          primary: t("buttons.logout", "Logout"),
          primaryTypographyProps: {
            noWrap: true,
            fontSize: "14px"
          }
        }
      )
    )
  );
  const items = renderTreeView(menuItems, selectedKey);
  const renderSider = /* @__PURE__ */ __name(() => {
    if (render) {
      return render({
        dashboard,
        logout,
        items,
        collapsed: !isSiderOpen
      });
    }
    return /* @__PURE__ */ React5.createElement(React5.Fragment, null, dashboard, items, logout);
  }, "renderSider");
  const drawer = /* @__PURE__ */ React5.createElement(
    List2,
    {
      disablePadding: true,
      sx: {
        flexGrow: 1,
        paddingTop: "16px"
      }
    },
    renderSider()
  );
  return /* @__PURE__ */ React5.createElement(React5.Fragment, null, /* @__PURE__ */ React5.createElement(
    Box3,
    {
      sx: {
        width: { xs: drawerWidth() },
        display: {
          xs: "none",
          md: "block"
        },
        transition: "width 0.3s ease"
      }
    }
  ), /* @__PURE__ */ React5.createElement(
    Box3,
    {
      component: "nav",
      sx: {
        position: "fixed",
        zIndex: 1101,
        width: { sm: drawerWidth() },
        display: "flex"
      }
    },
    /* @__PURE__ */ React5.createElement(
      Drawer2,
      {
        variant: "temporary",
        elevation: 2,
        open: opened,
        onClose: () => setOpened(false),
        ModalProps: {
          keepMounted: true
          // Better open performance on mobile.
        },
        sx: {
          display: {
            sm: "block",
            md: "none"
          }
        }
      },
      /* @__PURE__ */ React5.createElement(
        Box3,
        {
          sx: {
            width: drawerWidth()
          }
        },
        /* @__PURE__ */ React5.createElement(
          Box3,
          {
            sx: {
              height: 64,
              display: "flex",
              alignItems: "center",
              paddingLeft: "16px",
              fontSize: "14px"
            }
          },
          /* @__PURE__ */ React5.createElement(RenderToTitle, { collapsed: false })
        ),
        drawer
      )
    ),
    /* @__PURE__ */ React5.createElement(
      Drawer2,
      {
        variant: "permanent",
        sx: {
          display: { xs: "none", md: "block" },
          "& .MuiDrawer-paper": {
            width: drawerWidth,
            overflow: "hidden",
            transition: "width 200ms cubic-bezier(0.4, 0, 0.6, 1) 0ms"
          }
        },
        open: true
      },
      /* @__PURE__ */ React5.createElement(
        Paper,
        {
          elevation: 0,
          sx: {
            fontSize: "14px",
            width: "100%",
            height: 64,
            display: "flex",
            alignItems: "center",
            justifyContent: !isSiderOpen ? "center" : "space-between",
            paddingLeft: !isSiderOpen ? 0 : "16px",
            paddingRight: !isSiderOpen ? 0 : "8px",
            variant: "outlined",
            borderRadius: 0,
            borderBottom: (theme) => `1px solid ${theme.palette.action.focus}`
          }
        },
        /* @__PURE__ */ React5.createElement(RenderToTitle, { collapsed: !isSiderOpen }),
        isSiderOpen && /* @__PURE__ */ React5.createElement(
          IconButton2,
          {
            size: "small",
            onClick: () => onToggleSiderClick == null ? void 0 : onToggleSiderClick(false)
          },
          /* @__PURE__ */ React5.createElement(ChevronLeft2, null)
        )
      ),
      /* @__PURE__ */ React5.createElement(
        Box3,
        {
          sx: {
            flexGrow: 1,
            overflowX: "hidden",
            overflowY: "auto"
          }
        },
        drawer
      )
    ),
    /* @__PURE__ */ React5.createElement(
      IconButton2,
      {
        sx: (theme) => {
          const { palette } = theme;
          const { mode, getContrastText, primary, background } = palette;
          return {
            color: mode === "light" ? getContrastText(primary.main) : getContrastText(background.paper),
            display: { xs: "flex", md: "none" },
            justifyContent: "center",
            alignItems: "center",
            position: "fixed",
            top: "12px",
            left: "16px",
            zIndex: 1199,
            height: "36px",
            width: "36px"
          };
        },
        onClick: () => setOpened((prev) => !prev)
      },
      /* @__PURE__ */ React5.createElement(MenuRounded2, null)
    )
  ));
}, "ThemedSider");

// src/components/themedLayout/header/index.tsx
import React6 from "react";
import { useGetIdentity as useGetIdentity2, useActiveAuthProvider as useActiveAuthProvider4 } from "@refinedev/core";
import AppBar2 from "@mui/material/AppBar";
import Stack2 from "@mui/material/Stack";
import Toolbar2 from "@mui/material/Toolbar";
import Typography2 from "@mui/material/Typography";
import Avatar2 from "@mui/material/Avatar";
import IconButton3 from "@mui/material/IconButton";
import Menu from "@mui/icons-material/esm/Menu";
var ThemedHeader = /* @__PURE__ */ __name(({
  isSiderOpen,
  onToggleSiderClick,
  toggleSiderIcon: toggleSiderIconFromProps
}) => {
  const authProvider = useActiveAuthProvider4();
  const { data: user } = useGetIdentity2({
    v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)
  });
  const hasSidebarToggle = Boolean(onToggleSiderClick);
  return /* @__PURE__ */ React6.createElement(AppBar2, { position: "sticky" }, /* @__PURE__ */ React6.createElement(Toolbar2, null, hasSidebarToggle && /* @__PURE__ */ React6.createElement(
    IconButton3,
    {
      color: "inherit",
      "aria-label": "open drawer",
      onClick: () => onToggleSiderClick == null ? void 0 : onToggleSiderClick(),
      edge: "start",
      sx: {
        mr: 2,
        display: { xs: "none", md: "flex" },
        ...isSiderOpen && { display: "none" }
      }
    },
    (toggleSiderIconFromProps == null ? void 0 : toggleSiderIconFromProps(Boolean(isSiderOpen))) ?? /* @__PURE__ */ React6.createElement(Menu, null)
  ), /* @__PURE__ */ React6.createElement(
    Stack2,
    {
      direction: "row",
      width: "100%",
      justifyContent: "flex-end",
      alignItems: "center"
    },
    /* @__PURE__ */ React6.createElement(
      Stack2,
      {
        direction: "row",
        gap: "16px",
        alignItems: "center",
        justifyContent: "center"
      },
      /* @__PURE__ */ React6.createElement(
        Typography2,
        {
          sx: {
            display: { xs: "none", md: "block" }
          },
          variant: "subtitle2"
        },
        user == null ? void 0 : user.name
      ),
      /* @__PURE__ */ React6.createElement(Avatar2, { src: user == null ? void 0 : user.avatar, alt: user == null ? void 0 : user.name })
    )
  )));
}, "ThemedHeader");

// src/components/themedLayout/index.tsx
var ThemedLayout = /* @__PURE__ */ __name(({
  Sider: Sider2,
  Header: Header2,
  Title: Title2,
  Footer,
  OffLayoutArea,
  children
}) => {
  const [isSiderOpen, setIsSiderOpen] = useState3(true);
  const SiderToRender = Sider2 ?? ThemedSider;
  const HeaderToRender = Header2 ?? ThemedHeader;
  return /* @__PURE__ */ React7.createElement(Box4, { display: "flex", flexDirection: "row" }, /* @__PURE__ */ React7.createElement(
    SiderToRender,
    {
      Title: Title2,
      isSiderOpen,
      onToggleSiderClick: (isOpen) => setIsSiderOpen(Boolean(isOpen))
    }
  ), /* @__PURE__ */ React7.createElement(
    Box4,
    {
      sx: {
        display: "flex",
        flexDirection: "column",
        flex: 1,
        minHeight: "100vh"
      }
    },
    /* @__PURE__ */ React7.createElement(
      HeaderToRender,
      {
        isSiderOpen,
        onToggleSiderClick: () => setIsSiderOpen((prev) => !prev)
      }
    ),
    /* @__PURE__ */ React7.createElement(
      Box4,
      {
        component: "main",
        sx: {
          p: { xs: 1, md: 2, lg: 3 },
          flexGrow: 1,
          bgcolor: (theme) => theme.palette.background.default
        }
      },
      children
    ),
    Footer && /* @__PURE__ */ React7.createElement(Footer, null)
  ), OffLayoutArea && /* @__PURE__ */ React7.createElement(OffLayoutArea, null));
}, "ThemedLayout");

// src/components/themedLayout/title/index.tsx
import React8 from "react";
import { useRouterContext as useRouterContext4, useLink as useLink4, useRouterType as useRouterType4 } from "@refinedev/core";
import MuiLink from "@mui/material/Link";
import SvgIcon from "@mui/material/SvgIcon";
import Typography3 from "@mui/material/Typography";
var defaultText = "Refine Project";
var defaultIcon = /* @__PURE__ */ React8.createElement(
  "svg",
  {
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
      },
  /* @__PURE__ */ React8.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M13.7889 0.422291C12.6627 -0.140764 11.3373 -0.140764 10.2111 0.422291L2.21115 4.42229C0.85601 5.09986 0 6.48491 0 8V16C0 17.5151 0.85601 18.9001 2.21115 19.5777L10.2111 23.5777C11.3373 24.1408 12.6627 24.1408 13.7889 23.5777L21.7889 19.5777C23.144 18.9001 24 17.5151 24 16V8C24 6.48491 23.144 5.09986 21.7889 4.42229L13.7889 0.422291ZM8 8C8 5.79086 9.79086 4 12 4C14.2091 4 16 5.79086 16 8V16C16 18.2091 14.2091 20 12 20C9.79086 20 8 18.2091 8 16V8Z",
      fill: "currentColor"
    }
  ),
  /* @__PURE__ */ React8.createElement(
    "path",
    {
      d: "M14 8C14 9.10457 13.1046 10 12 10C10.8954 10 10 9.10457 10 8C10 6.89543 10.8954 6 12 6C13.1046 6 14 6.89543 14 8Z",
      fill: "currentColor"
    }
  )
);
var ThemedTitle = /* @__PURE__ */ __name(({
  collapsed,
  wrapperStyles,
  icon = defaultIcon,
  text = defaultText
}) => {
  const routerType = useRouterType4();
  const Link6 = useLink4();
  const { Link: LegacyLink } = useRouterContext4();
  const ActiveLink = routerType === "legacy" ? LegacyLink : Link6;
  return /* @__PURE__ */ React8.createElement(
    MuiLink,
    {
      to: "/",
      component: ActiveLink,
      underline: "none",
      sx: {
        display: "flex",
        alignItems: "center",
        gap: "12px",
        ...wrapperStyles
      }
    },
    /* @__PURE__ */ React8.createElement(SvgIcon, { height: "24px", width: "24px", color: "primary" }, icon),
    !collapsed && /* @__PURE__ */ React8.createElement(
      Typography3,
      {
        variant: "h6",
        fontWeight: 700,
        color: "text.primary",
        fontSize: "inherit",
        textOverflow: "ellipsis",
        overflow: "hidden"
      },
      text
    )
  );
}, "ThemedTitle");

// src/components/themedLayoutV2/index.tsx
import React13 from "react";
import Box6 from "@mui/material/Box";

// src/contexts/themedLayoutContext/index.tsx
import React9, { useState as useState4 } from "react";
var ThemedLayoutContext = React9.createContext({
  siderCollapsed: false,
  mobileSiderOpen: false,
  setSiderCollapsed: () => void 0,
  setMobileSiderOpen: () => void 0
});
var ThemedLayoutContextProvider = /* @__PURE__ */ __name(({ children, initialSiderCollapsed }) => {
  const [siderCollapsed, setSiderCollapsed] = useState4(
    initialSiderCollapsed ?? false
  );
  const [mobileSiderOpen, setMobileSiderOpen] = useState4(false);
  return /* @__PURE__ */ React9.createElement(
    ThemedLayoutContext.Provider,
    {
      value: {
        siderCollapsed,
        mobileSiderOpen,
        setSiderCollapsed,
        setMobileSiderOpen
      }
    },
    children
  );
}, "ThemedLayoutContextProvider");

// src/components/themedLayoutV2/sider/index.tsx
import React10, { useState as useState6 } from "react";
import Box5 from "@mui/material/Box";
import Drawer3 from "@mui/material/Drawer";
import List3 from "@mui/material/List";
import ListItemButton3 from "@mui/material/ListItemButton";
import ListItemIcon3 from "@mui/material/ListItemIcon";
import ListItemText3 from "@mui/material/ListItemText";
import Collapse3 from "@mui/material/Collapse";
import Tooltip3 from "@mui/material/Tooltip";
import IconButton4 from "@mui/material/IconButton";
import Paper2 from "@mui/material/Paper";
import ListOutlined3 from "@mui/icons-material/esm/ListOutlined";
import Logout3 from "@mui/icons-material/esm/Logout";
import ExpandLess3 from "@mui/icons-material/esm/ExpandLess";
import ExpandMore3 from "@mui/icons-material/esm/ExpandMore";
import ChevronLeft3 from "@mui/icons-material/esm/ChevronLeft";
import Dashboard3 from "@mui/icons-material/esm/Dashboard";
import {
  CanAccess as CanAccess3,
  useIsExistAuthentication as useIsExistAuthentication3,
  useLogout as useLogout3,
  useTitle as useTitle3,
  useTranslate as useTranslate3,
  useRouterContext as useRouterContext5,
  useRouterType as useRouterType5,
  useLink as useLink5,
  useMenu as useMenu3,
  useRefineContext as useRefineContext3,
  useActiveAuthProvider as useActiveAuthProvider5,
  pickNotDeprecated as pickNotDeprecated4,
  useWarnAboutChange as useWarnAboutChange3
} from "@refinedev/core";

// src/hooks/useAutocomplete/index.ts
import {
  useSelect as useSelectCore
} from "@refinedev/core";
import isEqual from "lodash-es/isEqual.js";
import unionWith from "lodash-es/unionWith.js";
var useAutocomplete = /* @__PURE__ */ __name((props) => {
  var _a, _b, _c, _d;
  const { query, defaultValueQuery, onSearch, overtime } = useSelectCore(props);
  return {
    autocompleteProps: {
      options: props.selectedOptionsOrder === "selected-first" ? unionWith(
        ((_a = defaultValueQuery.data) == null ? void 0 : _a.data) || [],
        ((_b = query.data) == null ? void 0 : _b.data) || [],
        isEqual
      ) : unionWith(
        ((_c = query.data) == null ? void 0 : _c.data) || [],
        ((_d = defaultValueQuery.data) == null ? void 0 : _d.data) || [],
        isEqual
      ),
      loading: query.isFetching || defaultValueQuery.isFetching,
      onInputChange: (event, value) => {
        if ((event == null ? void 0 : event.type) === "change") {
          onSearch(value);
        } else if ((event == null ? void 0 : event.type) === "click") {
          onSearch("");
        }
      },
      filterOptions: (x) => x
    },
    onSearch,
    query,
    defaultValueQuery,
    queryResult: query,
    defaultValueQueryResult: defaultValueQuery,
    overtime
  };
}, "useAutocomplete");

// src/hooks/useDataGrid/index.ts
import {
  useUpdate,
  useLiveMode,
  pickNotDeprecated as pickNotDeprecated3,
  useTable as useTableCore,
  useResourceParams
} from "@refinedev/core";
import { useState as useState5 } from "react";
import { darken, useTheme } from "@mui/material/styles";
import differenceWith from "lodash-es/differenceWith.js";
import isEqual2 from "lodash-es/isEqual.js";

// src/definitions/dataGrid/index.ts
import { GridLogicOperator } from "@mui/x-data-grid";
var transformSortModelToCrudSorting = /* @__PURE__ */ __name((sortModel) => {
  const sorter = sortModel.map(({ field, sort }) => ({
    field,
    order: sort || "asc"
  }));
  return sorter;
}, "transformSortModelToCrudSorting");
var transformCrudSortingToSortModel = /* @__PURE__ */ __name((crudSorting) => {
  const sortModel = crudSorting.map(({ field, order }) => ({
    field,
    sort: order
  }));
  return sortModel;
}, "transformCrudSortingToSortModel");
var transformMuiOperatorToCrudOperator = /* @__PURE__ */ __name((operatorValue) => {
  if (!operatorValue) {
    return "eq";
  }
  switch (operatorValue) {
    case "equals":
    case "is":
    case "=":
      return "eq";
    case "!=":
    case "not":
      return "ne";
    case "contains":
      return "contains";
    case "isAnyOf":
      return "in";
    case ">":
    case "after":
      return "gt";
    case ">=":
    case "onOrAfter":
      return "gte";
    case "<":
    case "before":
      return "lt";
    case "<=":
    case "onOrBefore":
      return "lte";
    case "startsWith":
      return "startswith";
    case "endsWith":
      return "endswith";
    case "isEmpty":
      return "null";
    case "isNotEmpty":
      return "nnull";
    default:
      return operatorValue;
  }
}, "transformMuiOperatorToCrudOperator");
var transformFilterModelToCrudFilters = /* @__PURE__ */ __name(({
  items,
  logicOperator
}) => {
  const filters = items.map(({ field, value, operator }) => {
    const filter = {
      field,
      value: ["isEmpty", "isNotEmpty"].includes(operator) ? true : value ?? "",
      operator: transformMuiOperatorToCrudOperator(operator)
    };
    return filter;
  });
  if (logicOperator === GridLogicOperator.Or) {
    return [{ operator: "or", value: filters }];
  }
  return filters;
}, "transformFilterModelToCrudFilters");
var transformCrudOperatorToMuiOperator = /* @__PURE__ */ __name((operator, columnType) => {
  switch (columnType) {
    case "number":
      switch (operator) {
        case "eq":
          return "=";
        case "ne":
          return "!=";
        case "gt":
          return ">";
        case "gte":
          return ">=";
        case "lt":
          return "<";
        case "lte":
          return "<=";
        case "null":
          return "isEmpty";
        case "nnull":
          return "isNotEmpty";
        case "in":
          return "isAnyOf";
        default:
          return operator;
      }
    case "singleSelect":
    case "boolean":
      switch (operator) {
        case "eq":
          return "is";
        default:
          return operator;
      }
    case void 0:
    case "string":
      switch (operator) {
        case "eq":
          return "equals";
        case "contains":
          return "contains";
        case "null":
          return "isEmpty";
        case "nnull":
          return "isNotEmpty";
        case "startswith":
          return "startsWith";
        case "endswith":
          return "endsWith";
        case "in":
          return "isAnyOf";
        default:
          return operator;
      }
    case "date":
    case "dateTime":
      switch (operator) {
        case "eq":
          return "is";
        case "ne":
          return "not";
        case "gt":
          return "after";
        case "gte":
          return "onOrAfter";
        case "lt":
          return "before";
        case "lte":
          return "onOrBefore";
        case "null":
          return "isEmpty";
        case "nnull":
          return "isNotEmpty";
        default:
          return operator;
      }
    default:
      return operator;
  }
}, "transformCrudOperatorToMuiOperator");
var transformCrudFiltersToFilterModel = /* @__PURE__ */ __name((crudFilters, columnsType) => {
  var _a;
  const gridFilterItems = [];
  const isExistOrFilter = crudFilters.some(
    (filter) => filter.operator === "or"
  );
  if (columnsType) {
    if (isExistOrFilter) {
      const orLogicalFilters = (_a = crudFilters.find(
        (filter) => filter.operator === "or"
      )) == null ? void 0 : _a.value;
      orLogicalFilters.map(({ field, value, operator }) => {
        const columnType = columnsType[field];
        gridFilterItems.push({
          field,
          operator: transformCrudOperatorToMuiOperator(operator, columnType),
          value: value === "" ? void 0 : value,
          id: field + operator
        });
      });
    } else {
      crudFilters.map(({ field, value, operator }) => {
        const columnType = columnsType[field];
        gridFilterItems.push({
          field,
          operator: transformCrudOperatorToMuiOperator(operator, columnType),
          value: value === "" ? void 0 : value,
          id: field + operator
        });
      });
    }
  }
  return {
    items: gridFilterItems,
    // If there is "or" filter, default link operator is "or"
    logicOperator: isExistOrFilter ? GridLogicOperator.Or : GridLogicOperator.And
  };
}, "transformCrudFiltersToFilterModel");

// src/hooks/useDataGrid/index.ts
function useDataGrid({
  onSearch: onSearchProp,
  initialCurrent,
  initialPageSize = 25,
  pagination,
  hasPagination = true,
  initialSorter,
  permanentSorter,
  defaultSetFilterBehavior = "replace",
  initialFilter,
  permanentFilter,
  filters: filtersFromProp,
  sorters: sortersFromProp,
  syncWithLocation: syncWithLocationProp,
  resource: resourceFromProp,
  successNotification,
  errorNotification,
  queryOptions,
  liveMode: liveModeFromProp,
  onLiveEvent,
  liveParams,
  meta,
  metaData,
  dataProviderName,
  overtimeOptions,
  editable = false,
  updateMutationOptions
} = {}) {
  const theme = useTheme();
  const liveMode = useLiveMode(liveModeFromProp);
  const [columnsTypes, setColumnsType] = useState5();
  const { identifier } = useResourceParams({ resource: resourceFromProp });
  const {
    tableQueryResult,
    tableQuery,
    current,
    setCurrent,
    pageSize,
    setPageSize,
    filters,
    setFilters,
    sorters,
    setSorters,
    sorter,
    setSorter,
    pageCount,
    createLinkForSyncWithLocation,
    overtime
  } = useTableCore({
    permanentSorter,
    permanentFilter,
    initialCurrent,
    initialPageSize,
    pagination,
    hasPagination,
    initialSorter,
    initialFilter,
    filters: filtersFromProp,
    sorters: sortersFromProp,
    syncWithLocation: syncWithLocationProp,
    defaultSetFilterBehavior,
    resource: resourceFromProp,
    successNotification,
    errorNotification,
    queryOptions,
    liveMode: liveModeFromProp,
    onLiveEvent,
    liveParams,
    meta: pickNotDeprecated3(meta, metaData),
    metaData: pickNotDeprecated3(meta, metaData),
    dataProviderName,
    overtimeOptions
  });
  const [muiCrudFilters, setMuiCrudFilters] = useState5(filters);
  const { data, isFetched, isLoading } = tableQueryResult;
  const isServerSideFilteringEnabled = ((filtersFromProp == null ? void 0 : filtersFromProp.mode) || "server") === "server";
  const isServerSideSortingEnabled = ((sortersFromProp == null ? void 0 : sortersFromProp.mode) || "server") === "server";
  const hasPaginationString = hasPagination === false ? "off" : "server";
  const isPaginationEnabled = ((pagination == null ? void 0 : pagination.mode) ?? hasPaginationString) !== "off";
  const preferredPermanentSorters = pickNotDeprecated3(sortersFromProp == null ? void 0 : sortersFromProp.permanent, permanentSorter) ?? [];
  const preferredPermanentFilters = pickNotDeprecated3(filtersFromProp == null ? void 0 : filtersFromProp.permanent, permanentFilter) ?? [];
  const handlePageChange = /* @__PURE__ */ __name((page) => {
    if (isPaginationEnabled) {
      setCurrent(page + 1);
    }
  }, "handlePageChange");
  const handlePageSizeChange = /* @__PURE__ */ __name((pageSize2) => {
    if (isPaginationEnabled) {
      setPageSize(pageSize2);
    }
  }, "handlePageSizeChange");
  const handleSortModelChange = /* @__PURE__ */ __name((sortModel) => {
    const crudSorting = transformSortModelToCrudSorting(sortModel);
    setSorters(crudSorting);
  }, "handleSortModelChange");
  const handleFilterModelChange = /* @__PURE__ */ __name((filterModel) => {
    const crudFilters = transformFilterModelToCrudFilters(filterModel);
    setMuiCrudFilters(crudFilters);
    setFilters(crudFilters.filter((f) => f.value !== ""));
    if (isPaginationEnabled) {
      setCurrent(1);
    }
  }, "handleFilterModelChange");
  const search = /* @__PURE__ */ __name(async (value) => {
    if (onSearchProp) {
      const searchFilters = await onSearchProp(value);
      setMuiCrudFilters(searchFilters);
      setFilters(searchFilters.filter((f) => f.value !== ""));
      if (isPaginationEnabled) {
        setCurrent(1);
      }
    }
  }, "search");
  const dataGridPaginationValues = /* @__PURE__ */ __name(() => {
    if (isPaginationEnabled) {
      return {
        paginationMode: "server",
        paginationModel: {
          page: current - 1,
          pageSize
        },
        onPaginationModelChange: (model) => {
          handlePageChange(model.page);
          handlePageSizeChange(model.pageSize);
        }
      };
    }
    return {
      paginationMode: "client"
    };
  }, "dataGridPaginationValues");
  const { mutate } = useUpdate({
    mutationOptions: updateMutationOptions
  });
  const processRowUpdate = /* @__PURE__ */ __name(async (newRow, oldRow) => {
    if (!editable) {
      return Promise.resolve(oldRow);
    }
    if (!identifier) {
      return Promise.reject(new Error("Resource is not defined"));
    }
    return new Promise((resolve, reject) => {
      mutate(
        {
          resource: identifier,
          id: newRow.id,
          values: newRow
        },
        {
          onError: (error) => {
            reject(error);
          },
          onSuccess: (data2) => {
            resolve(newRow);
          }
        }
      );
    });
  }, "processRowUpdate");
  return {
    tableQueryResult,
    tableQuery,
    dataGridProps: {
      disableRowSelectionOnClick: true,
      rows: (data == null ? void 0 : data.data) || [],
      loading: liveMode === "auto" ? isLoading : !isFetched,
      rowCount: (data == null ? void 0 : data.total) || 0,
      ...dataGridPaginationValues(),
      sortingMode: isServerSideSortingEnabled ? "server" : "client",
      sortModel: transformCrudSortingToSortModel(
        differenceWith(sorters, preferredPermanentSorters, isEqual2)
      ),
      onSortModelChange: handleSortModelChange,
      filterMode: isServerSideFilteringEnabled ? "server" : "client",
      filterModel: transformCrudFiltersToFilterModel(
        differenceWith(muiCrudFilters, preferredPermanentFilters, isEqual2),
        columnsTypes
      ),
      onFilterModelChange: handleFilterModelChange,
      onStateChange: (state) => {
        const newColumnsTypes = Object.fromEntries(
          Object.entries(state.columns.lookup).map(([key, value]) => {
            return [key, value.type];
          })
        );
        const isStateChanged = !isEqual2(newColumnsTypes, columnsTypes);
        if (isStateChanged) {
          setColumnsType(newColumnsTypes);
        }
      },
      sx: {
        border: "none",
        "& .MuiDataGrid-columnHeaders": {
          background: darken(theme.palette.background.paper, 0.05),
          borderBottom: `1px solid ${darken(
            theme.palette.background.paper,
            0.1
          )}`
        },
        "& .MuiDataGrid-cell": {
          borderBottom: `1px solid ${darken(
            theme.palette.background.paper,
            0.05
          )}`
        }
      },
      processRowUpdate: editable ? processRowUpdate : void 0
    },
    current,
    setCurrent,
    pageSize,
    setPageSize,
    pageCount,
    sorters,
    setSorters,
    sorter,
    setSorter,
    filters,
    setFilters,
    search,
    createLinkForSyncWithLocation,
    overtime
  };
}
__name(useDataGrid, "useDataGrid");

// src/hooks/useSiderVisible/index.ts
import { useContext } from "react";
var useSiderVisible = /* @__PURE__ */ __name(() => {
  const {
    mobileSiderOpen,
    siderCollapsed,
    setMobileSiderOpen,
    setSiderCollapsed
  } = useContext(ThemedLayoutContext);
  return {
    siderVisible: mobileSiderOpen,
    setSiderVisible: setMobileSiderOpen,
    drawerSiderVisible: !siderCollapsed,
    setDrawerSiderVisible: (visible) => setSiderCollapsed(!visible)
  };
}, "useSiderVisible");

// src/hooks/useThemedLayoutContext/index.ts
import { useContext as useContext2 } from "react";
var useThemedLayoutContext = /* @__PURE__ */ __name(() => {
  const {
    mobileSiderOpen,
    siderCollapsed,
    setMobileSiderOpen,
    setSiderCollapsed
  } = useContext2(ThemedLayoutContext);
  return {
    mobileSiderOpen,
    siderCollapsed,
    setMobileSiderOpen,
    setSiderCollapsed
  };
}, "useThemedLayoutContext");

// src/components/themedLayoutV2/sider/index.tsx
var ThemedSiderV2 = /* @__PURE__ */ __name(({
  Title: TitleFromProps,
  render,
  meta,
  activeItemDisabled = false
}) => {
  const {
    siderCollapsed,
    setSiderCollapsed,
    mobileSiderOpen,
    setMobileSiderOpen
  } = useThemedLayoutContext();
  const drawerWidth = /* @__PURE__ */ __name(() => {
    if (siderCollapsed)
      return 56;
    return 240;
  }, "drawerWidth");
  const t = useTranslate3();
  const routerType = useRouterType5();
  const Link6 = useLink5();
  const { Link: LegacyLink } = useRouterContext5();
  const ActiveLink = routerType === "legacy" ? LegacyLink : Link6;
  const { hasDashboard } = useRefineContext3();
  const translate = useTranslate3();
  const { menuItems, selectedKey, defaultOpenKeys } = useMenu3({ meta });
  const isExistAuthentication = useIsExistAuthentication3();
  const TitleFromContext = useTitle3();
  const authProvider = useActiveAuthProvider5();
  const { warnWhen, setWarnWhen } = useWarnAboutChange3();
  const { mutate: mutateLogout } = useLogout3({
    v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)
  });
  const [open, setOpen] = useState6({});
  React10.useEffect(() => {
    setOpen((previous) => {
      const previousKeys = Object.keys(previous);
      const previousOpenKeys = previousKeys.filter((key) => previous[key]);
      const uniqueKeys = /* @__PURE__ */ new Set([...previousOpenKeys, ...defaultOpenKeys]);
      const uniqueKeysRecord = Object.fromEntries(
        Array.from(uniqueKeys.values()).map((key) => [key, true])
      );
      return uniqueKeysRecord;
    });
  }, [defaultOpenKeys]);
  const RenderToTitle = TitleFromProps ?? TitleFromContext ?? ThemedTitleV2;
  const handleClick = /* @__PURE__ */ __name((key) => {
    setOpen({ ...open, [key]: !open[key] });
  }, "handleClick");
  const renderTreeView = /* @__PURE__ */ __name((tree, selectedKey2) => {
    return tree.map((item) => {
      const { icon, label, route, name, children, parentName, meta: meta2, options } = item;
      const isOpen = open[item.key || ""] || false;
      const isSelected = item.key === selectedKey2;
      const isNested = !(pickNotDeprecated4(meta2 == null ? void 0 : meta2.parent, options == null ? void 0 : options.parent, parentName) === void 0);
      if (children.length > 0) {
        return /* @__PURE__ */ React10.createElement(
          CanAccess3,
          {
            key: item.key,
            resource: name,
            action: "list",
            params: {
              resource: item
            }
          },
          /* @__PURE__ */ React10.createElement("div", { key: item.key }, /* @__PURE__ */ React10.createElement(
            Tooltip3,
            {
              title: label ?? name,
              placement: "right",
              disableHoverListener: !siderCollapsed,
              arrow: true
            },
            /* @__PURE__ */ React10.createElement(
              ListItemButton3,
              {
                onClick: () => {
                  if (siderCollapsed) {
                    setSiderCollapsed(false);
                    if (!isOpen) {
                      handleClick(item.key || "");
                    }
                  } else {
                    handleClick(item.key || "");
                  }
                },
                sx: {
                  pl: isNested ? 4 : 2,
                  justifyContent: "center"
                }
              },
              /* @__PURE__ */ React10.createElement(
                ListItemIcon3,
                {
                  sx: {
                    justifyContent: "center",
                    minWidth: "24px",
                    transition: "margin-right 0.3s",
                    marginRight: siderCollapsed ? "0px" : "12px",
                    color: "currentColor"
                  }
                },
                icon ?? /* @__PURE__ */ React10.createElement(ListOutlined3, null)
              ),
              /* @__PURE__ */ React10.createElement(
                ListItemText3,
                {
                  primary: label,
                  primaryTypographyProps: {
                    noWrap: true,
                    fontSize: "14px"
                  }
                }
              ),
              isOpen ? /* @__PURE__ */ React10.createElement(
                ExpandLess3,
                {
                  sx: {
                    color: "text.icon"
                  }
                }
              ) : /* @__PURE__ */ React10.createElement(
                ExpandMore3,
                {
                  sx: {
                    color: "text.icon"
                  }
                }
              )
            )
          ), !siderCollapsed && /* @__PURE__ */ React10.createElement(
            Collapse3,
            {
              in: open[item.key || ""],
              timeout: "auto",
              unmountOnExit: true
            },
            /* @__PURE__ */ React10.createElement(List3, { component: "div", disablePadding: true }, renderTreeView(children, selectedKey2))
          ))
        );
      }
      const linkStyle = activeItemDisabled && isSelected ? { pointerEvents: "none" } : {};
      return /* @__PURE__ */ React10.createElement(
        CanAccess3,
        {
          key: item.key,
          resource: name,
          action: "list",
          params: { resource: item }
        },
        /* @__PURE__ */ React10.createElement(
          Tooltip3,
          {
            title: label ?? name,
            placement: "right",
            disableHoverListener: !siderCollapsed,
            arrow: true
          },
          /* @__PURE__ */ React10.createElement(
            ListItemButton3,
            {
              component: ActiveLink,
              to: route,
              selected: isSelected,
              style: linkStyle,
              onClick: () => {
                setMobileSiderOpen(false);
              },
              sx: {
                pl: isNested ? 4 : 2,
                py: isNested ? 1.25 : 1,
                justifyContent: "center",
                color: isSelected ? "primary.main" : "text.primary"
              }
            },
            /* @__PURE__ */ React10.createElement(
              ListItemIcon3,
              {
                sx: {
                  justifyContent: "center",
                  transition: "margin-right 0.3s",
                  marginRight: siderCollapsed ? "0px" : "12px",
                  minWidth: "24px",
                  color: "currentColor"
                }
              },
              icon ?? /* @__PURE__ */ React10.createElement(ListOutlined3, null)
            ),
            /* @__PURE__ */ React10.createElement(
              ListItemText3,
              {
                primary: label,
                primaryTypographyProps: {
                  noWrap: true,
                  fontSize: "14px"
                }
              }
            )
          )
        )
      );
    });
  }, "renderTreeView");
  const dashboard = hasDashboard ? /* @__PURE__ */ React10.createElement(CanAccess3, { resource: "dashboard", action: "list" }, /* @__PURE__ */ React10.createElement(
    Tooltip3,
    {
      title: translate("dashboard.title", "Dashboard"),
      placement: "right",
      disableHoverListener: !siderCollapsed,
      arrow: true
    },
    /* @__PURE__ */ React10.createElement(
      ListItemButton3,
      {
        component: ActiveLink,
        to: "/",
        selected: selectedKey === "/",
        onClick: () => {
          setMobileSiderOpen(false);
        },
        sx: {
          pl: 2,
          py: 1,
          justifyContent: "center",
          color: selectedKey === "/" ? "primary.main" : "text.primary"
        }
      },
      /* @__PURE__ */ React10.createElement(
        ListItemIcon3,
        {
          sx: {
            justifyContent: "center",
            minWidth: "24px",
            transition: "margin-right 0.3s",
            marginRight: siderCollapsed ? "0px" : "12px",
            color: "currentColor",
            fontSize: "14px"
          }
        },
        /* @__PURE__ */ React10.createElement(Dashboard3, null)
      ),
      /* @__PURE__ */ React10.createElement(
        ListItemText3,
        {
          primary: translate("dashboard.title", "Dashboard"),
          primaryTypographyProps: {
            noWrap: true,
            fontSize: "14px"
          }
        }
      )
    )
  )) : null;
  const handleLogout = /* @__PURE__ */ __name(() => {
    if (warnWhen) {
      const confirm = window.confirm(
        t(
          "warnWhenUnsavedChanges",
          "Are you sure you want to leave? You have unsaved changes."
        )
      );
      if (confirm) {
        setWarnWhen(false);
        mutateLogout();
      }
    } else {
      mutateLogout();
    }
  }, "handleLogout");
  const logout = isExistAuthentication && /* @__PURE__ */ React10.createElement(
    Tooltip3,
    {
      title: t("buttons.logout", "Logout"),
      placement: "right",
      disableHoverListener: !siderCollapsed,
      arrow: true
    },
    /* @__PURE__ */ React10.createElement(
      ListItemButton3,
      {
        key: "logout",
        onClick: () => handleLogout(),
        sx: {
          justifyContent: "center"
        }
      },
      /* @__PURE__ */ React10.createElement(
        ListItemIcon3,
        {
          sx: {
            justifyContent: "center",
            minWidth: "24px",
            transition: "margin-right 0.3s",
            marginRight: siderCollapsed ? "0px" : "12px",
            color: "currentColor"
          }
        },
        /* @__PURE__ */ React10.createElement(Logout3, null)
      ),
      /* @__PURE__ */ React10.createElement(
        ListItemText3,
        {
          primary: t("buttons.logout", "Logout"),
          primaryTypographyProps: {
            noWrap: true,
            fontSize: "14px"
          }
        }
      )
    )
  );
  const items = renderTreeView(menuItems, selectedKey);
  const renderSider = /* @__PURE__ */ __name(() => {
    if (render) {
      return render({
        dashboard,
        logout,
        items,
        collapsed: siderCollapsed
      });
    }
    return /* @__PURE__ */ React10.createElement(React10.Fragment, null, dashboard, items, logout);
  }, "renderSider");
  const drawer = /* @__PURE__ */ React10.createElement(
    List3,
    {
      disablePadding: true,
      sx: {
        flexGrow: 1,
        paddingTop: "16px"
      }
    },
    renderSider()
  );
  return /* @__PURE__ */ React10.createElement(React10.Fragment, null, /* @__PURE__ */ React10.createElement(
    Box5,
    {
      sx: {
        width: { xs: drawerWidth() },
        display: {
          xs: "none",
          md: "block"
        },
        transition: "width 0.3s ease"
      }
    }
  ), /* @__PURE__ */ React10.createElement(
    Box5,
    {
      component: "nav",
      sx: {
        position: "fixed",
        zIndex: 1101,
        width: { sm: drawerWidth() },
        display: "flex"
      }
    },
    /* @__PURE__ */ React10.createElement(
      Drawer3,
      {
        variant: "temporary",
        elevation: 2,
        open: mobileSiderOpen,
        onClose: () => setMobileSiderOpen(false),
        ModalProps: {
          keepMounted: true
          // Better open performance on mobile.
        },
        sx: {
          display: {
            sm: "block",
            md: "none"
          }
        }
      },
      /* @__PURE__ */ React10.createElement(
        Box5,
        {
          sx: {
            width: drawerWidth()
          }
        },
        /* @__PURE__ */ React10.createElement(
          Box5,
          {
            sx: {
              height: 64,
              display: "flex",
              alignItems: "center",
              paddingLeft: "16px",
              fontSize: "14px"
            }
          },
          /* @__PURE__ */ React10.createElement(RenderToTitle, { collapsed: false })
        ),
        drawer
      )
    ),
    /* @__PURE__ */ React10.createElement(
      Drawer3,
      {
        variant: "permanent",
        sx: {
          display: { xs: "none", md: "block" },
          "& .MuiDrawer-paper": {
            width: drawerWidth(),
            overflow: "hidden",
            transition: "width 200ms cubic-bezier(0.4, 0, 0.6, 1) 0ms"
          }
        },
        open: true
      },
      /* @__PURE__ */ React10.createElement(
        Paper2,
        {
          elevation: 0,
          sx: {
            fontSize: "14px",
            width: "100%",
            height: 64,
            display: "flex",
            flexShrink: 0,
            alignItems: "center",
            justifyContent: siderCollapsed ? "center" : "space-between",
            paddingLeft: siderCollapsed ? 0 : "16px",
            paddingRight: siderCollapsed ? 0 : "8px",
            variant: "outlined",
            borderRadius: 0,
            borderBottom: (theme) => `1px solid ${theme.palette.action.focus}`
          }
        },
        /* @__PURE__ */ React10.createElement(RenderToTitle, { collapsed: siderCollapsed }),
        !siderCollapsed && /* @__PURE__ */ React10.createElement(IconButton4, { size: "small", onClick: () => setSiderCollapsed(true) }, /* @__PURE__ */ React10.createElement(ChevronLeft3, null))
      ),
      /* @__PURE__ */ React10.createElement(
        Box5,
        {
          sx: {
            flexGrow: 1,
            overflowX: "hidden",
            overflowY: "auto"
          }
        },
        drawer
      )
    )
  ));
}, "ThemedSiderV2");

// src/components/themedLayoutV2/header/index.tsx
import React12 from "react";
import {
  useGetIdentity as useGetIdentity3,
  useActiveAuthProvider as useActiveAuthProvider6,
  pickNotDeprecated as pickNotDeprecated5
} from "@refinedev/core";
import AppBar3 from "@mui/material/AppBar";
import Stack3 from "@mui/material/Stack";
import Toolbar3 from "@mui/material/Toolbar";
import Typography4 from "@mui/material/Typography";
import Avatar3 from "@mui/material/Avatar";

// src/components/themedLayoutV2/hamburgerMenu/index.tsx
import React11 from "react";
import IconButton5 from "@mui/material/IconButton";
import Menu2 from "@mui/icons-material/esm/Menu";
var HamburgerIcon = /* @__PURE__ */ __name((props) => /* @__PURE__ */ React11.createElement(IconButton5, { color: "inherit", "aria-label": "open drawer", edge: "start", ...props }, /* @__PURE__ */ React11.createElement(Menu2, null)), "HamburgerIcon");
var HamburgerMenu = /* @__PURE__ */ __name(() => {
  const {
    siderCollapsed,
    setSiderCollapsed,
    mobileSiderOpen,
    setMobileSiderOpen
  } = useThemedLayoutContext();
  return /* @__PURE__ */ React11.createElement(React11.Fragment, null, /* @__PURE__ */ React11.createElement(
    HamburgerIcon,
    {
      onClick: () => setSiderCollapsed(!siderCollapsed),
      sx: {
        mr: 2,
        display: { xs: "none", md: "flex" },
        ...!siderCollapsed && { display: "none" }
      }
    }
  ), /* @__PURE__ */ React11.createElement(
    HamburgerIcon,
    {
      onClick: () => setMobileSiderOpen(!mobileSiderOpen),
      sx: {
        mr: 2,
        display: { xs: "flex", md: "none" },
        ...mobileSiderOpen && { display: "none" }
      }
    }
  ));
}, "HamburgerMenu");

// src/components/themedLayoutV2/header/index.tsx
var ThemedHeaderV2 = /* @__PURE__ */ __name(({
  isSticky,
  sticky
}) => {
  const authProvider = useActiveAuthProvider6();
  const { data: user } = useGetIdentity3({
    v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)
  });
  const prefferedSticky = pickNotDeprecated5(sticky, isSticky) ?? true;
  return /* @__PURE__ */ React12.createElement(AppBar3, { position: prefferedSticky ? "sticky" : "relative" }, /* @__PURE__ */ React12.createElement(Toolbar3, null, /* @__PURE__ */ React12.createElement(HamburgerMenu, null), /* @__PURE__ */ React12.createElement(
    Stack3,
    {
      direction: "row",
      width: "100%",
      justifyContent: "flex-end",
      alignItems: "center"
    },
    /* @__PURE__ */ React12.createElement(
      Stack3,
      {
        direction: "row",
        gap: "16px",
        alignItems: "center",
        justifyContent: "center"
      },
      (user == null ? void 0 : user.name) && /* @__PURE__ */ React12.createElement(Typography4, { variant: "subtitle2", }, user == null ? void 0 : user.name),
      (user == null ? void 0 : user.avatar) && /* @__PURE__ */ React12.createElement(Avatar3, { src: user == null ? void 0 : user.avatar, alt: user == null ? void 0 : user.name })
    )
  )));
}, "ThemedHeaderV2");

// src/components/themedLayoutV2/index.tsx
var ThemedLayoutV2 = /* @__PURE__ */ __name(({
  Sider: Sider2,
  Header: Header2,
  Title: Title2,
  Footer,
  OffLayoutArea,
  children,
  initialSiderCollapsed
}) => {
  const SiderToRender = Sider2 ?? ThemedSiderV2;
  const HeaderToRender = Header2 ?? ThemedHeaderV2;
  return /* @__PURE__ */ React13.createElement(ThemedLayoutContextProvider, { initialSiderCollapsed }, /* @__PURE__ */ React13.createElement(Box6, { display: "flex", flexDirection: "row" }, /* @__PURE__ */ React13.createElement(SiderToRender, { Title: Title2 }), /* @__PURE__ */ React13.createElement(
    Box6,
    {
      sx: [
        {
          display: "flex",
          flexDirection: "column",
          flex: 1,
          minWidth: "1px",
          minHeight: "1px"
        }
      ]
    },
    /* @__PURE__ */ React13.createElement(HeaderToRender, null),
    /* @__PURE__ */ React13.createElement(
      Box6,
      {
        component: "main",
        sx: {
          p: { xs: 1, md: 2, lg: 3 },
          flexGrow: 1,
          bgcolor: (theme) => theme.palette.background.default
        }
      },
      children
    ),
    Footer && /* @__PURE__ */ React13.createElement(Footer, null)
  ), OffLayoutArea && /* @__PURE__ */ React13.createElement(OffLayoutArea, null)));
}, "ThemedLayoutV2");

// src/components/themedLayoutV2/title/index.tsx
import React14 from "react";
import {
  useRouterContext as useRouterContext6,
  useLink as useLink6,
  useRouterType as useRouterType6,
  useRefineOptions
} from "@refinedev/core";
import MuiLink2 from "@mui/material/Link";
import SvgIcon2 from "@mui/material/SvgIcon";
import Typography5 from "@mui/material/Typography";
var ThemedTitleV2 = /* @__PURE__ */ __name(({
  collapsed,
  wrapperStyles,
  icon: iconFromProps,
  text: textFromProps
}) => {
  const {
    title: { icon: defaultIcon2, text: defaultText2 } = {}
  } = useRefineOptions();
  const icon = typeof iconFromProps === "undefined" ? defaultIcon2 : iconFromProps;
  const text = typeof textFromProps === "undefined" ? defaultText2 : textFromProps;
  const routerType = useRouterType6();
  const Link6 = useLink6();
  const { Link: LegacyLink } = useRouterContext6();
  const ActiveLink = routerType === "legacy" ? LegacyLink : Link6;
  return /* @__PURE__ */ React14.createElement(
    MuiLink2,
    {
      to: "/",
      component: ActiveLink,
      underline: "none",
      sx: {
        display: "flex",
        alignItems: "center",
        gap: "12px",
        ...wrapperStyles
      }
    },
    /* @__PURE__ */ React14.createElement(SvgIcon2, { height: "24px", width: "24px", color: "primary" }, icon),
    !collapsed && /* @__PURE__ */ React14.createElement(
      Typography5,
      {
        variant: "h6",
        fontWeight: 700,
        color: "text.primary",
        fontSize: "inherit",
        textOverflow: "ellipsis",
        overflow: "hidden"
      },
      text
    )
  );
}, "ThemedTitleV2");

// src/components/pages/login/index.tsx
import * as React15 from "react";
import { useActiveAuthProvider as useActiveAuthProvider7 } from "@refinedev/core";
import { useForm } from "@refinedev/react-hook-form";
import Button3 from "@mui/material/Button";
import TextField from "@mui/material/TextField";
import FormControlLabel from "@mui/material/FormControlLabel";
import Checkbox from "@mui/material/Checkbox";
import Link from "@mui/material/Link";
import Box7 from "@mui/material/Box";
import Typography6 from "@mui/material/Typography";
import Container from "@mui/material/Container";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import {
  useLogin,
  useTranslate as useTranslate4
} from "@refinedev/core";
var LoginPage = /* @__PURE__ */ __name(() => {
  var _a;
  const {
    register,
    handleSubmit,
    formState: { errors }
  } = useForm();
  const authProvider = useActiveAuthProvider7();
  const { mutate: login, isLoading } = useLogin({
    v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)
  });
  const translate = useTranslate4();
  return /* @__PURE__ */ React15.createElement(React15.Fragment, null, /* @__PURE__ */ React15.createElement(
    Box7,
    {
      component: "div",
      sx: {
        background: "radial-gradient(50% 50% at 50% 50%, #63386A 0%, #310438 100%)",
        backgroundSize: "cover"
      }
    },
    /* @__PURE__ */ React15.createElement(
      Container,
      {
        component: "main",
        maxWidth: "xs",
        sx: {
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          height: "100vh"
        }
      },
      /* @__PURE__ */ React15.createElement(
        Box7,
        {
          sx: {
            display: "flex",
            justifyContent: "center",
            flexDirection: "column",
            alignItems: "center"
          }
        },
        /* @__PURE__ */ React15.createElement("div", null, /* @__PURE__ */ React15.createElement(
          "img",
          {
            src: "https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine.svg",
            alt: "Refine Logo",
            style: { maxWidth: 200 }
          }
        )),
        /* @__PURE__ */ React15.createElement(Box7, { mt: 4 }, /* @__PURE__ */ React15.createElement(Card, null, /* @__PURE__ */ React15.createElement(CardContent, { sx: { paddingX: "32px" } }, /* @__PURE__ */ React15.createElement(
          Typography6,
          {
            component: "h1",
            variant: "h5",
            align: "center",
            sx: {
              fontWeight: "700",
              margin: "12px 0"
            }
          },
          translate("pages.login.title", "Sign in your account")
        ), /* @__PURE__ */ React15.createElement(
          Box7,
          {
            component: "form",
            onSubmit: handleSubmit((data) => {
              login(data);
            }),
            gap: "16px"
          },
          /* @__PURE__ */ React15.createElement(
            TextField,
            {
              ...register("username", {
                required: true
              }),
              id: "username",
              margin: "normal",
              size: "small",
              fullWidth: true,
              label: translate("pages.login.username", "Username"),
              name: "username",
              autoComplete: "username",
              autoFocus: true
            }
          ),
          /* @__PURE__ */ React15.createElement(
            TextField,
            {
              ...register("password", {
                required: true
              }),
              id: "password",
              size: "small",
              margin: "normal",
              fullWidth: true,
              name: "password",
              label: translate("pages.login.password", "Password"),
              helperText: (_a = errors == null ? void 0 : errors.password) == null ? void 0 : _a.message,
              type: "password",
              placeholder: "\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF",
              autoComplete: "current-password"
            }
          ),
          /* @__PURE__ */ React15.createElement(
            Box7,
            {
              component: "div",
              sx: {
                display: "flex",
                justifyContent: "space-between",
                alignItems: "center"
              }
            },
            /* @__PURE__ */ React15.createElement(
              FormControlLabel,
              {
                sx: {
                  span: {
                    fontSize: "12px",
                    color: "text.secondary"
                  }
                },
                color: "secondary",
                control: /* @__PURE__ */ React15.createElement(
                  Checkbox,
                  {
                    size: "small",
                    id: "remember",
                    ...register("remember")
                  }
                ),
                label: translate("pages.login.remember", "Remember me")
              }
            ),
            /* @__PURE__ */ React15.createElement(
              Link,
              {
                href: "#",
                sx: {
                  fontSize: "12px",
                  textDecoration: "none"
                }
              },
              /* @__PURE__ */ React15.createElement(
                Typography6,
                {
                  sx: {
                    fontSize: "12px"
                  }
                },
                translate(
                  "pages.login.forgotPassword",
                  "Forgot password?"
                )
              )
            )
          ),
          /* @__PURE__ */ React15.createElement(
            Button3,
            {
              type: "submit",
              fullWidth: true,
              variant: "contained",
              sx: {
                my: "8px",
                color: "white"
              },
              disabled: isLoading
            },
            translate("pages.login.signin", "Sign in")
          ),
          /* @__PURE__ */ React15.createElement(Box7, { style: { marginTop: 8 } }, /* @__PURE__ */ React15.createElement(Typography6, { variant: "subtitle2" }, translate(
            "pages.login.noAccount",
            "Don\u2019t have an account?"
          ), " ", /* @__PURE__ */ React15.createElement(
            Link,
            {
              underline: "none",
              href: "#",
              style: {
                fontWeight: "bold"
              }
            },
            translate("pages.login.signup", "Sign up")
          )))
        ))))
      )
    )
  ));
}, "LoginPage");

// src/components/pages/ready/index.tsx
import * as React16 from "react";
import Stack4 from "@mui/material/Stack";
import Grid from "@mui/material/Grid";
import Typography7 from "@mui/material/Typography";
import Button4 from "@mui/material/Button";
import Link2 from "@mui/material/Link";
var ReadyPage = /* @__PURE__ */ __name(() => {
  const renderCode = /* @__PURE__ */ __name((text) => /* @__PURE__ */ React16.createElement(
    Typography7,
    {
      sx: {
        backgroundColor: (theme) => theme.palette.secondary.contrastText,
        color: (theme) => theme.palette.secondary.main,
        display: "inline-block",
        fontFamily: "monospace"
      }
    },
    text
  ), "renderCode");
  return /* @__PURE__ */ React16.createElement(React16.Fragment, null, /* @__PURE__ */ React16.createElement(
    Grid,
    {
      container: true,
      sx: {
        backgroundColor: (theme) => theme.palette.secondary.main,
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        height: "100vh",
        backgroundImage: "url('https://refine.ams3.cdn.digitaloceanspaces.com/login-background/background.png')",
        backgroundSize: "cover"
      },
      p: 3
    },
    /* @__PURE__ */ React16.createElement(
      Grid,
      {
        display: "flex",
        flexDirection: "column",
        flex: 1,
        alignItems: "center",
        color: (theme) => theme.palette.primary.contrastText
      },
      /* @__PURE__ */ React16.createElement(Typography7, { display: "flex", justifyContent: "center" }, /* @__PURE__ */ React16.createElement(
        "img",
        {
          style: { marginBottom: "48px" },
          src: "https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine.svg",
          alt: "Refine Logo"
        }
      )),
      /* @__PURE__ */ React16.createElement(
        Typography7,
        {
          variant: "h2",
          fontWeight: "bold",
          display: "flex",
          justifyContent: "center"
        },
        "Welcome on board"
      ),
      /* @__PURE__ */ React16.createElement(Typography7, { variant: "h5", mt: 2 }, "Your configuration is completed."),
      /* @__PURE__ */ React16.createElement(Typography7, { variant: "h6", mt: 2 }, "Now you can get started by adding your resources to the", " ", renderCode("resources"), " property of ", renderCode("Refine")),
      /* @__PURE__ */ React16.createElement(Grid, { item: true, sm: 12, mt: 12, display: "flex", justifyContent: "center" }, /* @__PURE__ */ React16.createElement(Stack4, { spacing: 2, direction: { xs: "column", sm: "row" } }, /* @__PURE__ */ React16.createElement(
        Link2,
        {
          href: "https://refine.dev",
          target: "_blank",
          rel: "noreferrer",
          style: {
            textDecoration: "none"
          }
        },
        /* @__PURE__ */ React16.createElement(Button4, { variant: "outlined", fullWidth: true }, "Documentation")
      ), /* @__PURE__ */ React16.createElement(
        Link2,
        {
          href: "https://refine.dev/examples",
          target: "_blank",
          rel: "noreferrer",
          style: {
            textDecoration: "none"
          }
        },
        /* @__PURE__ */ React16.createElement(Button4, { variant: "outlined", fullWidth: true }, "Examples")
      ), /* @__PURE__ */ React16.createElement(
        Link2,
        {
          href: "https://discord.gg/refine",
          target: "_blank",
          rel: "noreferrer",
          style: {
            textDecoration: "none"
          }
        },
        /* @__PURE__ */ React16.createElement(Button4, { variant: "outlined", fullWidth: true }, "Community")
      )))
    )
  ));
}, "ReadyPage");

// src/components/pages/welcome/index.tsx
import React17 from "react";
import { WelcomePage as WelcomePageFromCore } from "@refinedev/core";
var WelcomePage = /* @__PURE__ */ __name(() => {
  return /* @__PURE__ */ React17.createElement(WelcomePageFromCore, null);
}, "WelcomePage");

// src/components/pages/error/index.tsx
import React18, { useEffect, useState as useState7 } from "react";
import { useGo, useResource, useRouterType as useRouterType7 } from "@refinedev/core";
import { useNavigation, useTranslate as useTranslate5 } from "@refinedev/core";
import Stack5 from "@mui/material/Stack";
import Button5 from "@mui/material/Button";
import Tooltip4 from "@mui/material/Tooltip";
import Typography8 from "@mui/material/Typography";
import Grid2 from "@mui/material/Grid";
import Info from "@mui/icons-material/esm/Info";
var ErrorComponent = /* @__PURE__ */ __name(() => {
  const [errorMessage, setErrorMessage] = useState7();
  const { push } = useNavigation();
  const go = useGo();
  const routerType = useRouterType7();
  const { resource, action } = useResource();
  const translate = useTranslate5();
  useEffect(() => {
    if (resource && action) {
      setErrorMessage(
        translate(
          "pages.error.info",
          {
            action,
            resource: resource == null ? void 0 : resource.name
          },
          `You may have forgotten to add the "${action}" component to "${resource == null ? void 0 : resource.name}" resource.`
        )
      );
    }
  }, [action, resource]);
  return /* @__PURE__ */ React18.createElement(Grid2, { display: "flex", justifyContent: "center", alignItems: "center", mt: 20 }, /* @__PURE__ */ React18.createElement(Grid2, { container: true, direction: "column", display: "flex", alignItems: "center" }, /* @__PURE__ */ React18.createElement(Typography8, { variant: "h1" }, "404"), /* @__PURE__ */ React18.createElement(Stack5, { direction: "row", spacing: "2" }, /* @__PURE__ */ React18.createElement(Typography8, null, translate(
    "pages.error.404",
    "Sorry, the page you visited does not exist."
  )), errorMessage && /* @__PURE__ */ React18.createElement(Tooltip4, { title: errorMessage }, /* @__PURE__ */ React18.createElement(Info, { }))), /* @__PURE__ */ React18.createElement(
    Button5,
    {
      onClick: () => {
        if (routerType === "legacy") {
          push("/");
        } else {
          go({ to: "/" });
        }
      }
    },
    translate("pages.error.backHome", "Back Home")
  )));
}, "ErrorComponent");

// src/components/pages/auth/index.tsx
import React23 from "react";

// src/components/pages/auth/components/login/index.tsx
import * as React19 from "react";
import {
  useActiveAuthProvider as useActiveAuthProvider8
} from "@refinedev/core";
import { useForm as useForm2 } from "@refinedev/react-hook-form";
import { FormProvider } from "react-hook-form";
import Button6 from "@mui/material/Button";
import TextField2 from "@mui/material/TextField";
import Box8 from "@mui/material/Box";
import Typography9 from "@mui/material/Typography";
import Container2 from "@mui/material/Container";
import Card2 from "@mui/material/Card";
import CardContent2 from "@mui/material/CardContent";
import Checkbox2 from "@mui/material/Checkbox";
import FormControlLabel2 from "@mui/material/FormControlLabel";
import Divider from "@mui/material/Divider";
import MuiLink3 from "@mui/material/Link";
import Stack6 from "@mui/material/Stack";
import {
  useLogin as useLogin2,
  useTranslate as useTranslate6,
  useRouterContext as useRouterContext7,
  useRouterType as useRouterType8,
  useLink as useLink7
} from "@refinedev/core";

// src/components/pages/auth/components/styles.ts
var layoutStyles = {};
var titleStyles = {
  textAlign: "center",
  fontSize: "24px",
  marginBottom: "24px",
  overflowWrap: "break-word",
  hyphens: "manual",
  textOverflow: "unset",
  whiteSpace: "pre-wrap"
};

// src/components/pages/auth/components/login/index.tsx
var LoginPage2 = /* @__PURE__ */ __name(({
  providers,
  registerLink,
  forgotPasswordLink,
  rememberMe,
  contentProps,
  wrapperProps,
  renderContent,
  formProps,
  title,
  hideForm
}) => {
  var _a;
  const { onSubmit, ...useFormProps } = formProps || {};
  const methods = useForm2({
    ...useFormProps
  });
  const {
    register,
    handleSubmit,
    formState: { errors }
  } = methods;
  const authProvider = useActiveAuthProvider8();
  const { mutate: login, isLoading } = useLogin2({
    v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)
  });
  const translate = useTranslate6();
  const routerType = useRouterType8();
  const Link6 = useLink7();
  const { Link: LegacyLink } = useRouterContext7();
  const ActiveLink = routerType === "legacy" ? LegacyLink : Link6;
  const PageTitle = title === false ? null : /* @__PURE__ */ React19.createElement(
    "div",
    {
      style: {
        display: "flex",
        justifyContent: "center",
        marginBottom: "32px",
        fontSize: "20px"
      }
    },
    title ?? /* @__PURE__ */ React19.createElement(
      ThemedTitleV2,
      {
        collapsed: false,
        wrapperStyles: {
          gap: "8px"
        }
      }
    )
  );
  const renderProviders = /* @__PURE__ */ __name(() => {
    if (providers && providers.length > 0) {
      return /* @__PURE__ */ React19.createElement(React19.Fragment, null, /* @__PURE__ */ React19.createElement(Stack6, { spacing: 1 }, providers.map((provider) => {
        return /* @__PURE__ */ React19.createElement(
          Button6,
          {
            key: provider.name,
            variant: "outlined",
            fullWidth: true,
            sx: {
              color: "primary.light",
              borderColor: "primary.light",
              textTransform: "none"
            },
            onClick: () => login({ providerName: provider.name }),
            startIcon: provider.icon
          },
          provider.label
        );
      })), !hideForm && /* @__PURE__ */ React19.createElement(
        Divider,
        {
          sx: {
            fontSize: "12px",
            marginY: "16px"
          }
        },
        translate("pages.login.divider", "or")
      ));
    }
    return null;
  }, "renderProviders");
  const Content = /* @__PURE__ */ React19.createElement(Card2, { ...contentProps ?? {} }, /* @__PURE__ */ React19.createElement(CardContent2, { sx: { p: "32px", "&:last-child": { pb: "32px" } } }, /* @__PURE__ */ React19.createElement(
    Typography9,
    {
      component: "h1",
      variant: "h5",
      align: "center",
      style: titleStyles,
      color: "primary",
      fontWeight: 700
    },
    translate("pages.login.title", "Sign in to your account")
  ), renderProviders(), !hideForm && /* @__PURE__ */ React19.createElement(
    Box8,
    {
      component: "form",
      onSubmit: handleSubmit((data) => {
        if (onSubmit) {
          return onSubmit(data);
        }
        return login(data);
      })
    },
    /* @__PURE__ */ React19.createElement(
      TextField2,
      {
        ...register("email", {
          required: translate(
            "pages.login.errors.requiredEmail",
            "Email is required"
          )
        }),
        id: "email",
        margin: "normal",
        fullWidth: true,
        label: translate("pages.login.fields.email", "Email"),
        error: !!errors.email,
        name: "email",
        type: "email",
        autoComplete: "email",
        sx: {
          mt: 0
        }
      }
    ),
    /* @__PURE__ */ React19.createElement(
      TextField2,
      {
        ...register("password", {
          required: translate(
            "pages.login.errors.requiredPassword",
            "Password is required"
          )
        }),
        id: "password",
        margin: "normal",
        fullWidth: true,
        name: "password",
        label: translate("pages.login.fields.password", "Password"),
        helperText: (_a = errors == null ? void 0 : errors.password) == null ? void 0 : _a.message,
        error: !!errors.password,
        type: "password",
        placeholder: "\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF",
        autoComplete: "current-password",
        sx: {
          mb: 0
        }
      }
    ),
    /* @__PURE__ */ React19.createElement(
      Box8,
      {
        component: "div",
        sx: {
          mt: "24px",
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center"
        }
      },
      rememberMe ?? /* @__PURE__ */ React19.createElement(
        FormControlLabel2,
        {
          sx: {
            span: {
              fontSize: "14px",
              color: "text.secondary"
            }
          },
          color: "secondary",
          control: /* @__PURE__ */ React19.createElement(
            Checkbox2,
            {
              size: "small",
              id: "remember",
              ...register("remember")
            }
          ),
          label: translate(
            "pages.login.buttons.rememberMe",
            "Remember me"
          )
        }
      ),
      forgotPasswordLink ?? /* @__PURE__ */ React19.createElement(
        MuiLink3,
        {
          variant: "body2",
          color: "primary",
          fontSize: "12px",
          component: ActiveLink,
          underline: "none",
          to: "/forgot-password"
        },
        translate(
          "pages.login.buttons.forgotPassword",
          "Forgot password?"
        )
      )
    ),
    /* @__PURE__ */ React19.createElement(
      Button6,
      {
        type: "submit",
        fullWidth: true,
        variant: "contained",
        disabled: isLoading,
        sx: { mt: "24px" }
      },
      translate("pages.login.signin", "Sign in")
    )
  ), registerLink ?? /* @__PURE__ */ React19.createElement(
    Box8,
    {
      sx: {
        mt: "24px",
        display: "flex",
        justifyContent: "center",
        alignItems: "center"
      }
    },
    /* @__PURE__ */ React19.createElement(
      Typography9,
      {
        textAlign: "center",
        variant: "body2",
        component: "span",
        fontSize: "12px"
      },
      translate(
        "pages.login.buttons.noAccount",
        "Don\u2019t have an account?"
      )
    ),
    /* @__PURE__ */ React19.createElement(
      MuiLink3,
      {
        ml: "4px",
        fontSize: "12px",
        variant: "body2",
        color: "primary",
        component: ActiveLink,
        underline: "none",
        to: "/register",
        fontWeight: "bold"
      },
      translate("pages.login.signup", "Sign up")
    )
  )));
  return /* @__PURE__ */ React19.createElement(FormProvider, { ...methods }, /* @__PURE__ */ React19.createElement(Box8, { component: "div", style: layoutStyles, ...wrapperProps ?? {} }, /* @__PURE__ */ React19.createElement(
    Container2,
    {
      component: "main",
      sx: {
        display: "flex",
        flexDirection: "column",
        justifyContent: hideForm ? "flex-start" : "center",
        alignItems: "center",
        minHeight: "100dvh",
        padding: "16px",
        width: "100%",
        maxWidth: "400px"
      }
    },
    /* @__PURE__ */ React19.createElement(
      Box8,
      {
        sx: {
          width: "100%",
          maxWidth: "400px",
          display: "flex",
          flexDirection: "column",
          paddingTop: hideForm ? "15dvh" : 0
        }
      },
      renderContent ? renderContent(Content, PageTitle) : /* @__PURE__ */ React19.createElement(React19.Fragment, null, PageTitle, Content)
    )
  )));
}, "LoginPage");

// src/components/pages/auth/components/register/index.tsx
import * as React20 from "react";
import {
  useActiveAuthProvider as useActiveAuthProvider9
} from "@refinedev/core";
import { useForm as useForm3 } from "@refinedev/react-hook-form";
import Button7 from "@mui/material/Button";
import TextField3 from "@mui/material/TextField";
import Box9 from "@mui/material/Box";
import Typography10 from "@mui/material/Typography";
import Container3 from "@mui/material/Container";
import Card3 from "@mui/material/Card";
import CardContent3 from "@mui/material/CardContent";
import Divider2 from "@mui/material/Divider";
import Stack7 from "@mui/material/Stack";
import MuiLink4 from "@mui/material/Link";
import {
  useTranslate as useTranslate7,
  useRouterContext as useRouterContext8,
  useRouterType as useRouterType9,
  useLink as useLink8,
  useRegister
} from "@refinedev/core";
var RegisterPage = /* @__PURE__ */ __name(({
  loginLink,
  wrapperProps,
  contentProps,
  renderContent,
  providers,
  formProps,
  title,
  hideForm
}) => {
  const { onSubmit, ...useFormProps } = formProps || {};
  const {
    register,
    handleSubmit,
    formState: { errors }
  } = useForm3({
    ...useFormProps
  });
  const authProvider = useActiveAuthProvider9();
  const { mutate: registerMutate, isLoading } = useRegister({
    v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)
  });
  const translate = useTranslate7();
  const routerType = useRouterType9();
  const Link6 = useLink8();
  const { Link: LegacyLink } = useRouterContext8();
  const ActiveLink = routerType === "legacy" ? LegacyLink : Link6;
  const PageTitle = title === false ? null : /* @__PURE__ */ React20.createElement(
    "div",
    {
      style: {
        display: "flex",
        justifyContent: "center",
        marginBottom: "32px",
        fontSize: "20px"
      }
    },
    title ?? /* @__PURE__ */ React20.createElement(
      ThemedTitleV2,
      {
        collapsed: false,
        wrapperStyles: {
          gap: "8px"
        }
      }
    )
  );
  const renderProviders = /* @__PURE__ */ __name(() => {
    if (providers && providers.length > 0) {
      return /* @__PURE__ */ React20.createElement(React20.Fragment, null, /* @__PURE__ */ React20.createElement(Stack7, { spacing: 1 }, providers.map((provider) => {
        return /* @__PURE__ */ React20.createElement(
          Button7,
          {
            key: provider.name,
            color: "secondary",
            fullWidth: true,
            variant: "outlined",
            sx: {
              color: "primary.light",
              borderColor: "primary.light",
              textTransform: "none"
            },
            onClick: () => registerMutate({
              providerName: provider.name
            }),
            startIcon: provider.icon
          },
          provider.label
        );
      })), !hideForm && /* @__PURE__ */ React20.createElement(
        Divider2,
        {
          sx: {
            fontSize: "12px",
            marginY: "16px"
          }
        },
        translate(
          "pages.register.divider",
          translate("pages.login.divider", "or")
        )
      ));
    }
    return null;
  }, "renderProviders");
  const Content = /* @__PURE__ */ React20.createElement(Card3, { ...contentProps ?? {} }, /* @__PURE__ */ React20.createElement(CardContent3, { sx: { p: "32px", "&:last-child": { pb: "32px" } } }, /* @__PURE__ */ React20.createElement(
    Typography10,
    {
      component: "h1",
      variant: "h5",
      align: "center",
      style: titleStyles,
      color: "primary",
      fontWeight: 700
    },
    translate("pages.register.title", "Sign up for your account")
  ), renderProviders(), !hideForm && /* @__PURE__ */ React20.createElement(
    Box9,
    {
      component: "form",
      onSubmit: handleSubmit((data) => {
        if (onSubmit) {
          return onSubmit(data);
        }
        return registerMutate(data);
      })
    },
    /* @__PURE__ */ React20.createElement(
      TextField3,
      {
        ...register("email", {
          required: translate(
            "pages.register.errors.requiredEmail",
            "Email is required"
          ),
          pattern: {
            value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
            message: translate(
              "pages.register.errors.validEmail",
              "Invalid email address"
            )
          }
        }),
        id: "email",
        margin: "normal",
        fullWidth: true,
        label: translate("pages.register.email", "Email"),
        error: !!errors.email,
        helperText: errors["email"] ? errors["email"].message : "",
        name: "email",
        autoComplete: "email",
        sx: {
          mt: 0
        }
      }
    ),
    /* @__PURE__ */ React20.createElement(
      TextField3,
      {
        ...register("password", {
          required: translate(
            "pages.register.errors.requiredPassword",
            "Password is required"
          )
        }),
        id: "password",
        margin: "normal",
        fullWidth: true,
        name: "password",
        label: translate("pages.register.fields.password", "Password"),
        helperText: errors["password"] ? errors["password"].message : "",
        error: !!errors.password,
        type: "password",
        placeholder: "\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF",
        autoComplete: "current-password",
        sx: {
          mb: 0
        }
      }
    ),
    /* @__PURE__ */ React20.createElement(
      Button7,
      {
        type: "submit",
        fullWidth: true,
        variant: "contained",
        disabled: isLoading,
        sx: {
          mt: "24px"
        }
      },
      translate("pages.register.signup", "Sign up")
    )
  ), loginLink ?? /* @__PURE__ */ React20.createElement(
    Box9,
    {
      display: "flex",
      justifyContent: "flex-end",
      alignItems: "center",
      sx: {
        mt: "24px",
        display: "flex",
        justifyContent: "center",
        alignItems: "center"
      }
    },
    /* @__PURE__ */ React20.createElement(Typography10, { variant: "body2", component: "span", fontSize: "12px" }, translate(
      "pages.register.buttons.haveAccount",
      translate(
        "pages.login.buttons.haveAccount",
        "Have an account?"
      )
    )),
    /* @__PURE__ */ React20.createElement(
      MuiLink4,
      {
        ml: "4px",
        variant: "body2",
        color: "primary",
        component: ActiveLink,
        underline: "none",
        to: "/login",
        fontSize: "12px",
        fontWeight: "bold"
      },
      translate(
        "pages.register.signin",
        translate("pages.login.signin", "Sign in")
      )
    )
  )));
  return /* @__PURE__ */ React20.createElement(Box9, { component: "div", style: layoutStyles, ...wrapperProps ?? {} }, /* @__PURE__ */ React20.createElement(
    Container3,
    {
      component: "main",
      sx: {
        display: "flex",
        flexDirection: "column",
        justifyContent: hideForm ? "flex-start" : "center",
        alignItems: "center",
        minHeight: "100dvh",
        padding: "16px",
        width: "100%",
        maxWidth: "400px"
      }
    },
    /* @__PURE__ */ React20.createElement(
      Box9,
      {
        sx: {
          width: "100%",
          maxWidth: "400px",
          display: "flex",
          flexDirection: "column",
          paddingTop: hideForm ? "15dvh" : 0
        }
      },
      renderContent ? renderContent(Content, PageTitle) : /* @__PURE__ */ React20.createElement(React20.Fragment, null, PageTitle, Content)
    )
  ));
}, "RegisterPage");

// src/components/pages/auth/components/forgotPassword/index.tsx
import Button8 from "@mui/material/Button";
import TextField4 from "@mui/material/TextField";
import Box10 from "@mui/material/Box";
import Typography11 from "@mui/material/Typography";
import Container4 from "@mui/material/Container";
import Card4 from "@mui/material/Card";
import CardContent4 from "@mui/material/CardContent";
import MuiLink5 from "@mui/material/Link";
import { useForm as useForm4 } from "@refinedev/react-hook-form";
import * as React21 from "react";
import {
  useForgotPassword,
  useLink as useLink9,
  useRouterContext as useRouterContext9,
  useRouterType as useRouterType10,
  useTranslate as useTranslate8
} from "@refinedev/core";
var ForgotPasswordPage = /* @__PURE__ */ __name(({
  loginLink,
  wrapperProps,
  contentProps,
  renderContent,
  formProps,
  title
}) => {
  const { onSubmit, ...useFormProps } = formProps || {};
  const {
    register,
    handleSubmit,
    formState: { errors }
  } = useForm4({
    ...useFormProps
  });
  const { mutate, isLoading } = useForgotPassword();
  const translate = useTranslate8();
  const routerType = useRouterType10();
  const Link6 = useLink9();
  const { Link: LegacyLink } = useRouterContext9();
  const ActiveLink = routerType === "legacy" ? LegacyLink : Link6;
  const PageTitle = title === false ? null : /* @__PURE__ */ React21.createElement(
    "div",
    {
      style: {
        display: "flex",
        justifyContent: "center",
        marginBottom: "32px",
        fontSize: "20px"
      }
    },
    title ?? /* @__PURE__ */ React21.createElement(
      ThemedTitleV2,
      {
        collapsed: false,
        wrapperStyles: {
          gap: "8px"
        }
      }
    )
  );
  const Content = /* @__PURE__ */ React21.createElement(Card4, { ...contentProps ?? {} }, /* @__PURE__ */ React21.createElement(CardContent4, { sx: { p: "32px", "&:last-child": { pb: "32px" } } }, /* @__PURE__ */ React21.createElement(
    Typography11,
    {
      component: "h1",
      variant: "h5",
      align: "center",
      style: titleStyles,
      color: "primary",
      fontWeight: 700
    },
    translate("pages.forgotPassword.title", "Forgot your password?")
  ), /* @__PURE__ */ React21.createElement(
    Box10,
    {
      component: "form",
      onSubmit: handleSubmit((data) => {
        if (onSubmit) {
          return onSubmit(data);
        }
        return mutate(data);
      })
    },
    /* @__PURE__ */ React21.createElement(
      TextField4,
      {
        ...register("email", {
          required: translate(
            "pages.forgotPassword.errors.requiredEmail",
            "Email is required"
          ),
          pattern: {
            value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
            message: translate(
              "pages.register.errors.validEmail",
              "Invalid email address"
            )
          }
        }),
        id: "email",
        margin: "normal",
        fullWidth: true,
        label: translate("pages.forgotPassword.fields.email", "Email"),
        name: "email",
        type: "email",
        error: !!errors.email,
        autoComplete: "email",
        sx: {
          m: 0
        }
      }
    ),
    loginLink ?? /* @__PURE__ */ React21.createElement(Box10, { textAlign: "right", sx: { mt: "24px" } }, /* @__PURE__ */ React21.createElement(Typography11, { variant: "body2", component: "span", fontSize: "12px" }, translate(
      "pages.forgotPassword.buttons.haveAccount",
      translate(
        "pages.register.buttons.haveAccount",
        "Have an account? "
      )
    )), " ", /* @__PURE__ */ React21.createElement(
      MuiLink5,
      {
        variant: "body2",
        component: ActiveLink,
        underline: "none",
        to: "/login",
        fontWeight: "bold",
        fontSize: "12px",
        color: "primary.light"
      },
      translate(
        "pages.forgotPassword.signin",
        translate("pages.login.signin", "Sign in")
      )
    )),
    /* @__PURE__ */ React21.createElement(
      Button8,
      {
        type: "submit",
        fullWidth: true,
        variant: "contained",
        sx: { mt: "24px" },
        disabled: isLoading
      },
      translate(
        "pages.forgotPassword.buttons.submit",
        "Send reset instructions"
      )
    )
  )));
  return /* @__PURE__ */ React21.createElement(React21.Fragment, null, /* @__PURE__ */ React21.createElement(Box10, { component: "div", style: layoutStyles, ...wrapperProps ?? {} }, /* @__PURE__ */ React21.createElement(
    Container4,
    {
      component: "main",
      maxWidth: "xs",
      sx: {
        display: "flex",
        flexDirection: "column",
        justifyContent: "center",
        minHeight: "100dvh",
        padding: "16px",
        width: "100%",
        maxWidth: "400px"
      }
    },
    renderContent ? renderContent(Content, PageTitle) : /* @__PURE__ */ React21.createElement(React21.Fragment, null, PageTitle, Content)
  )));
}, "ForgotPasswordPage");

// src/components/pages/auth/components/updatePassword/index.tsx
import * as React22 from "react";
import {
  useActiveAuthProvider as useActiveAuthProvider10
} from "@refinedev/core";
import { useForm as useForm5 } from "@refinedev/react-hook-form";
import Button9 from "@mui/material/Button";
import TextField5 from "@mui/material/TextField";
import Box11 from "@mui/material/Box";
import Typography12 from "@mui/material/Typography";
import Container5 from "@mui/material/Container";
import Card5 from "@mui/material/Card";
import CardContent5 from "@mui/material/CardContent";
import {
  useTranslate as useTranslate9,
  useUpdatePassword
} from "@refinedev/core";
var UpdatePasswordPage = /* @__PURE__ */ __name(({
  wrapperProps,
  contentProps,
  renderContent,
  formProps,
  title = void 0
}) => {
  var _a, _b;
  const { onSubmit, ...useFormProps } = formProps || {};
  const {
    register,
    watch,
    handleSubmit,
    formState: { errors }
  } = useForm5({
    ...useFormProps
  });
  const authProvider = useActiveAuthProvider10();
  const { mutate: update, isLoading } = useUpdatePassword({
    v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)
  });
  const translate = useTranslate9();
  const PageTitle = title === false ? null : /* @__PURE__ */ React22.createElement(
    "div",
    {
      style: {
        display: "flex",
        justifyContent: "center",
        marginBottom: "32px",
        fontSize: "20px"
      }
    },
    title ?? /* @__PURE__ */ React22.createElement(
      ThemedTitleV2,
      {
        collapsed: false,
        wrapperStyles: {
          gap: "8px"
        }
      }
    )
  );
  const Content = /* @__PURE__ */ React22.createElement(Card5, { ...contentProps ?? {} }, /* @__PURE__ */ React22.createElement(CardContent5, { sx: { p: "32px", "&:last-child": { pb: "32px" } } }, /* @__PURE__ */ React22.createElement(
    Typography12,
    {
      component: "h1",
      variant: "h5",
      align: "center",
      style: titleStyles,
      color: "primary",
      fontWeight: 700
    },
    translate("pages.updatePassword.title", "Set New Password")
  ), /* @__PURE__ */ React22.createElement(
    Box11,
    {
      component: "form",
      onSubmit: handleSubmit((data) => {
        if (onSubmit) {
          return onSubmit(data);
        }
        return update(data);
      })
    },
    /* @__PURE__ */ React22.createElement(
      TextField5,
      {
        ...register("password", {
          required: translate(
            "pages.updatePassword.errors.requiredPassword",
            "Password required"
          )
        }),
        id: "password",
        margin: "normal",
        fullWidth: true,
        name: "password",
        label: translate(
          "pages.updatePassword.fields.password",
          "New Password"
        ),
        helperText: (_a = errors == null ? void 0 : errors.password) == null ? void 0 : _a.message,
        error: !!(errors == null ? void 0 : errors.password),
        type: "password",
        placeholder: "\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF",
        autoComplete: "current-password",
        sx: {
          m: 0
        }
      }
    ),
    /* @__PURE__ */ React22.createElement(
      TextField5,
      {
        ...register("confirmPassword", {
          required: translate(
            "pages.updatePassword.errors.requiredConfirmPassword",
            "Confirm Password is required"
          ),
          validate: (value) => {
            if (watch("password") !== value) {
              return translate(
                "pages.updatePassword.errors.confirmPasswordNotMatch",
                "Passwords do not match"
              );
            }
            return true;
          }
        }),
        id: "confirmPassword",
        margin: "normal",
        fullWidth: true,
        name: "confirmPassword",
        label: translate(
          "pages.updatePassword.fields.confirmPassword",
          "Confirm New Password"
        ),
        helperText: (_b = errors == null ? void 0 : errors.confirmPassword) == null ? void 0 : _b.message,
        error: !!(errors == null ? void 0 : errors.confirmPassword),
        type: "password",
        placeholder: "\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF",
        autoComplete: "current-confirm-password",
        sx: {
          mb: 0
        }
      }
    ),
    /* @__PURE__ */ React22.createElement(
      Button9,
      {
        type: "submit",
        fullWidth: true,
        variant: "contained",
        sx: {
          mt: "24px"
        },
        disabled: isLoading
      },
      translate("pages.updatePassword.buttons.submit", "Update")
    )
  )));
  return /* @__PURE__ */ React22.createElement(React22.Fragment, null, /* @__PURE__ */ React22.createElement(Box11, { component: "div", style: layoutStyles, ...wrapperProps ?? {} }, /* @__PURE__ */ React22.createElement(
    Container5,
    {
      component: "main",
      maxWidth: "xs",
      sx: {
        display: "flex",
        flexDirection: "column",
        justifyContent: "center",
        minHeight: "100dvh",
        padding: "16px",
        width: "100%",
        maxWidth: "400px"
      }
    },
    renderContent ? renderContent(Content, PageTitle) : /* @__PURE__ */ React22.createElement(React22.Fragment, null, PageTitle, Content)
  )));
}, "UpdatePasswordPage");

// src/components/pages/auth/index.tsx
var AuthPage = /* @__PURE__ */ __name((props) => {
  const { type } = props;
  const renderView = /* @__PURE__ */ __name(() => {
    switch (type) {
      case "register":
        return /* @__PURE__ */ React23.createElement(RegisterPage, { ...props });
      case "forgotPassword":
        return /* @__PURE__ */ React23.createElement(ForgotPasswordPage, { ...props });
      case "updatePassword":
        return /* @__PURE__ */ React23.createElement(UpdatePasswordPage, { ...props });
      default:
        return /* @__PURE__ */ React23.createElement(LoginPage2, { ...props });
    }
  }, "renderView");
  return /* @__PURE__ */ React23.createElement(React23.Fragment, null, renderView());
}, "AuthPage");

// src/components/crud/create/index.tsx
import React24 from "react";
import {
  useNavigation as useNavigation2,
  useTranslate as useTranslate10,
  useUserFriendlyName,
  useRefineContext as useRefineContext4,
  useRouterType as useRouterType11,
  useBack,
  useResource as useResource2
} from "@refinedev/core";
import Card6 from "@mui/material/Card";
import CardHeader from "@mui/material/CardHeader";
import CardActions from "@mui/material/CardActions";
import CardContent6 from "@mui/material/CardContent";
import IconButton6 from "@mui/material/IconButton";
import Typography13 from "@mui/material/Typography";
import Box12 from "@mui/material/Box";
import ArrowBackIcon from "@mui/icons-material/esm/ArrowBack";
import { RefinePageHeaderClassNames } from "@refinedev/ui-types";
var Create = /* @__PURE__ */ __name(({
  title,
  children,
  saveButtonProps: saveButtonPropsFromProps,
  resource: resourceFromProps,
  isLoading = false,
  breadcrumb: breadcrumbFromProps,
  wrapperProps,
  headerProps,
  contentProps,
  headerButtonProps,
  headerButtons,
  footerButtonProps,
  footerButtons,
  goBack: goBackFromProps
}) => {
  var _a, _b;
  const translate = useTranslate10();
  const {
    options: { breadcrumb: globalBreadcrumb } = {}
  } = useRefineContext4();
  const routerType = useRouterType11();
  const back = useBack();
  const { goBack } = useNavigation2();
  const getUserFriendlyName = useUserFriendlyName();
  const { resource, action, identifier } = useResource2(resourceFromProps);
  const breadcrumb = typeof breadcrumbFromProps === "undefined" ? globalBreadcrumb : breadcrumbFromProps;
  const breadcrumbComponent = typeof breadcrumb !== "undefined" ? /* @__PURE__ */ React24.createElement(React24.Fragment, null, breadcrumb) ?? void 0 : /* @__PURE__ */ React24.createElement(Breadcrumb, null);
  const saveButtonProps = {
    ...isLoading ? { disabled: true } : {},
    ...saveButtonPropsFromProps
  };
  const defaultFooterButtons = /* @__PURE__ */ React24.createElement(SaveButton, { ...saveButtonProps });
  return /* @__PURE__ */ React24.createElement(Card6, { ...wrapperProps ?? {} }, breadcrumbComponent, /* @__PURE__ */ React24.createElement(
    CardHeader,
    {
      sx: {
        display: "flex",
        flexWrap: "wrap",
        ".MuiCardHeader-action": {
          margin: 0,
          alignSelf: "center"
        }
      },
      title: title ?? /* @__PURE__ */ React24.createElement(
        Typography13,
        {
          variant: "h5",
          className: RefinePageHeaderClassNames.Title
        },
        translate(
          `${identifier}.titles.create`,
          `Create ${getUserFriendlyName(
            ((_a = resource == null ? void 0 : resource.meta) == null ? void 0 : _a.label) ?? ((_b = resource == null ? void 0 : resource.options) == null ? void 0 : _b.label) ?? (resource == null ? void 0 : resource.label) ?? identifier,
            "singular"
          )}`
        )
      ),
      avatar: typeof goBackFromProps !== "undefined" ? goBackFromProps : /* @__PURE__ */ React24.createElement(
        IconButton6,
        {
          onClick: action !== "list" || typeof action !== "undefined" ? routerType === "legacy" ? goBack : back : void 0
        },
        /* @__PURE__ */ React24.createElement(ArrowBackIcon, null)
      ),
      action: headerButtons ? /* @__PURE__ */ React24.createElement(Box12, { display: "flex", gap: "16px", ...headerButtonProps ?? {} }, headerButtons ? typeof headerButtons === "function" ? headerButtons({
        defaultButtons: null
      }) : headerButtons : null) : void 0,
      ...headerProps ?? {}
    }
  ), /* @__PURE__ */ React24.createElement(CardContent6, { ...contentProps ?? {} }, children), /* @__PURE__ */ React24.createElement(
    CardActions,
    {
      sx: {
        display: "flex",
        justifyContent: "flex-end",
        gap: "16px",
        padding: "16px"
      },
      ...footerButtonProps ?? {}
    },
    footerButtons ? typeof footerButtons === "function" ? footerButtons({
      defaultButtons: defaultFooterButtons,
      saveButtonProps
    }) : footerButtons : defaultFooterButtons
  ));
}, "Create");

// src/components/crud/edit/index.tsx
import React25 from "react";
import {
  useMutationMode,
  useNavigation as useNavigation3,
  useTranslate as useTranslate11,
  useUserFriendlyName as useUserFriendlyName2,
  useRefineContext as useRefineContext5,
  useToPath,
  useResource as useResource3,
  useRouterType as useRouterType12,
  useBack as useBack2,
  useGo as useGo2
} from "@refinedev/core";
import Card7 from "@mui/material/Card";
import CardHeader2 from "@mui/material/CardHeader";
import IconButton7 from "@mui/material/IconButton";
import CardContent7 from "@mui/material/CardContent";
import CardActions2 from "@mui/material/CardActions";
import Typography14 from "@mui/material/Typography";
import Box13 from "@mui/material/Box";
import ArrowBackIcon2 from "@mui/icons-material/esm/ArrowBack";
import { RefinePageHeaderClassNames as RefinePageHeaderClassNames2 } from "@refinedev/ui-types";
var Edit = /* @__PURE__ */ __name(({
  title,
  saveButtonProps: saveButtonPropsFromProps,
  mutationMode: mutationModeProp,
  recordItemId,
  children,
  deleteButtonProps: deleteButtonPropsFromProps,
  canDelete,
  resource: resourceFromProps,
  isLoading = false,
  breadcrumb: breadcrumbFromProps,
  dataProviderName,
  wrapperProps,
  headerProps,
  contentProps,
  headerButtonProps,
  headerButtons,
  footerButtonProps,
  footerButtons,
  goBack: goBackFromProps,
  autoSaveProps
}) => {
  var _a, _b, _c;
  const translate = useTranslate11();
  const {
    options: { breadcrumb: globalBreadcrumb } = {}
  } = useRefineContext5();
  const { mutationMode: mutationModeContext } = useMutationMode();
  const mutationMode = mutationModeProp ?? mutationModeContext;
  const routerType = useRouterType12();
  const back = useBack2();
  const go = useGo2();
  const { goBack, list: legacyGoList } = useNavigation3();
  const getUserFriendlyName = useUserFriendlyName2();
  const {
    resource,
    action,
    id: idFromParams,
    identifier
  } = useResource3(resourceFromProps);
  const goListPath = useToPath({
    resource,
    action: "list"
  });
  const id = recordItemId ?? idFromParams;
  const breadcrumb = typeof breadcrumbFromProps === "undefined" ? globalBreadcrumb : breadcrumbFromProps;
  const hasList = (resource == null ? void 0 : resource.list) && !recordItemId;
  const isDeleteButtonVisible = canDelete ?? ((((_a = resource == null ? void 0 : resource.meta) == null ? void 0 : _a.canDelete) ?? (resource == null ? void 0 : resource.canDelete)) || deleteButtonPropsFromProps);
  const breadcrumbComponent = typeof breadcrumb !== "undefined" ? /* @__PURE__ */ React25.createElement(React25.Fragment, null, breadcrumb) ?? void 0 : /* @__PURE__ */ React25.createElement(Breadcrumb, null);
  const listButtonProps = hasList ? {
    ...isLoading ? { disabled: true } : {},
    resource: routerType === "legacy" ? resource == null ? void 0 : resource.route : identifier
  } : void 0;
  const refreshButtonProps = {
    ...isLoading ? { disabled: true } : {},
    resource: routerType === "legacy" ? resource == null ? void 0 : resource.route : identifier,
    recordItemId: id,
    dataProviderName
  };
  const defaultHeaderButtons = /* @__PURE__ */ React25.createElement(Box13, { display: "flex", flexDirection: "row", alignItems: "center" }, autoSaveProps && /* @__PURE__ */ React25.createElement(AutoSaveIndicator, { ...autoSaveProps }), hasList && /* @__PURE__ */ React25.createElement(ListButton, { ...listButtonProps }), /* @__PURE__ */ React25.createElement(RefreshButton, { ...refreshButtonProps }));
  const deleteButtonProps = isDeleteButtonVisible ? {
    ...isLoading ? { disabled: true } : {},
    resource: routerType === "legacy" ? resource == null ? void 0 : resource.route : identifier,
    mutationMode,
    variant: "outlined",
    onSuccess: () => {
      if (routerType === "legacy") {
        legacyGoList((resource == null ? void 0 : resource.route) ?? (resource == null ? void 0 : resource.name) ?? "");
      } else {
        go({ to: goListPath });
      }
    },
    recordItemId: id,
    dataProviderName,
    ...deleteButtonPropsFromProps
  } : void 0;
  const saveButtonProps = {
    ...isLoading ? { disabled: true } : {},
    ...saveButtonPropsFromProps
  };
  const defaultFooterButtons = /* @__PURE__ */ React25.createElement(React25.Fragment, null, isDeleteButtonVisible && /* @__PURE__ */ React25.createElement(DeleteButton, { ...deleteButtonProps }), /* @__PURE__ */ React25.createElement(SaveButton, { ...saveButtonProps }));
  return /* @__PURE__ */ React25.createElement(Card7, { ...wrapperProps ?? {} }, breadcrumbComponent, /* @__PURE__ */ React25.createElement(
    CardHeader2,
    {
      sx: {
        display: "flex",
        flexWrap: "wrap",
        ".MuiCardHeader-action": {
          margin: 0,
          alignSelf: "center"
        }
      },
      title: title ?? /* @__PURE__ */ React25.createElement(
        Typography14,
        {
          variant: "h5",
          className: RefinePageHeaderClassNames2.Title
        },
        translate(
          `${identifier}.titles.edit`,
          `Edit ${getUserFriendlyName(
            ((_b = resource == null ? void 0 : resource.meta) == null ? void 0 : _b.label) ?? ((_c = resource == null ? void 0 : resource.options) == null ? void 0 : _c.label) ?? (resource == null ? void 0 : resource.label) ?? identifier,
            "singular"
          )}`
        )
      ),
      avatar: typeof goBackFromProps !== "undefined" ? goBackFromProps : /* @__PURE__ */ React25.createElement(
        IconButton7,
        {
          onClick: action !== "list" && typeof action !== "undefined" ? routerType === "legacy" ? goBack : back : void 0
        },
        /* @__PURE__ */ React25.createElement(ArrowBackIcon2, null)
      ),
      action: /* @__PURE__ */ React25.createElement(Box13, { display: "flex", gap: "16px", ...headerButtonProps ?? {} }, headerButtons ? typeof headerButtons === "function" ? headerButtons({
        defaultButtons: defaultHeaderButtons,
        listButtonProps,
        refreshButtonProps
      }) : headerButtons : defaultHeaderButtons),
      ...headerProps ?? {}
    }
  ), /* @__PURE__ */ React25.createElement(CardContent7, { ...contentProps ?? {} }, children), /* @__PURE__ */ React25.createElement(
    CardActions2,
    {
      sx: {
        display: "flex",
        justifyContent: "flex-end",
        gap: "16px",
        padding: "16px"
      },
      ...footerButtonProps ?? {}
    },
    footerButtons ? typeof footerButtons === "function" ? footerButtons({
      defaultButtons: defaultFooterButtons,
      deleteButtonProps,
      saveButtonProps
    }) : footerButtons : defaultFooterButtons
  ));
}, "Edit");

// src/components/crud/list/index.tsx
import React26 from "react";
import {
  useTranslate as useTranslate12,
  useUserFriendlyName as useUserFriendlyName3,
  useRefineContext as useRefineContext6,
  useRouterType as useRouterType13,
  useResource as useResource4
} from "@refinedev/core";
import Card8 from "@mui/material/Card";
import CardHeader3 from "@mui/material/CardHeader";
import CardContent8 from "@mui/material/CardContent";
import Typography15 from "@mui/material/Typography";
import Box14 from "@mui/material/Box";
import { RefinePageHeaderClassNames as RefinePageHeaderClassNames3 } from "@refinedev/ui-types";
var List4 = /* @__PURE__ */ __name(({
  title,
  canCreate,
  children,
  createButtonProps: createButtonPropsFromProps,
  resource: resourceFromProps,
  breadcrumb: breadcrumbFromProps,
  wrapperProps,
  headerProps,
  contentProps,
  headerButtonProps,
  headerButtons
}) => {
  var _a, _b;
  const translate = useTranslate12();
  const {
    options: { breadcrumb: globalBreadcrumb } = {}
  } = useRefineContext6();
  const getUserFriendlyName = useUserFriendlyName3();
  const routerType = useRouterType13();
  const { resource, identifier } = useResource4(resourceFromProps);
  const isCreateButtonVisible = canCreate ?? (((resource == null ? void 0 : resource.canCreate) ?? !!(resource == null ? void 0 : resource.create)) || createButtonPropsFromProps);
  const breadcrumb = typeof breadcrumbFromProps === "undefined" ? globalBreadcrumb : breadcrumbFromProps;
  const breadcrumbComponent = typeof breadcrumb !== "undefined" ? /* @__PURE__ */ React26.createElement(React26.Fragment, null, breadcrumb) ?? void 0 : /* @__PURE__ */ React26.createElement(Breadcrumb, null);
  const createButtonProps = isCreateButtonVisible ? {
    resource: routerType === "legacy" ? resource == null ? void 0 : resource.route : identifier,
    ...createButtonPropsFromProps
  } : void 0;
  const defaultHeaderButtons = isCreateButtonVisible ? /* @__PURE__ */ React26.createElement(CreateButton, { ...createButtonProps }) : null;
  return /* @__PURE__ */ React26.createElement(Card8, { ...wrapperProps ?? {} }, breadcrumbComponent, /* @__PURE__ */ React26.createElement(
    CardHeader3,
    {
      sx: {
        display: "flex",
        flexWrap: "wrap",
        ".MuiCardHeader-action": {
          margin: 0,
          alignSelf: "center"
        }
      },
      title: title ?? /* @__PURE__ */ React26.createElement(
        Typography15,
        {
          variant: "h5",
          className: RefinePageHeaderClassNames3.Title
        },
        translate(
          `${identifier}.titles.list`,
          getUserFriendlyName(
            ((_a = resource == null ? void 0 : resource.meta) == null ? void 0 : _a.label) ?? ((_b = resource == null ? void 0 : resource.options) == null ? void 0 : _b.label) ?? (resource == null ? void 0 : resource.label) ?? identifier,
            "plural"
          )
        )
      ),
      action: /* @__PURE__ */ React26.createElement(Box14, { display: "flex", gap: "16px", ...headerButtonProps }, headerButtons ? typeof headerButtons === "function" ? headerButtons({
        defaultButtons: defaultHeaderButtons,
        createButtonProps
      }) : headerButtons : defaultHeaderButtons),
      ...headerProps ?? {}
    }
  ), /* @__PURE__ */ React26.createElement(CardContent8, { ...contentProps ?? {} }, children));
}, "List");

// src/components/crud/show/index.tsx
import React27 from "react";
import {
  useNavigation as useNavigation4,
  useTranslate as useTranslate13,
  useUserFriendlyName as useUserFriendlyName4,
  useRefineContext as useRefineContext7,
  useRouterType as useRouterType14,
  useBack as useBack3,
  useGo as useGo3,
  useResource as useResource5,
  useToPath as useToPath2
} from "@refinedev/core";
import Card9 from "@mui/material/Card";
import CardActions3 from "@mui/material/CardActions";
import CardContent9 from "@mui/material/CardContent";
import CardHeader4 from "@mui/material/CardHeader";
import IconButton8 from "@mui/material/IconButton";
import Box15 from "@mui/material/Box";
import Typography16 from "@mui/material/Typography";
import ArrowBackIcon3 from "@mui/icons-material/esm/ArrowBack";
import { RefinePageHeaderClassNames as RefinePageHeaderClassNames4 } from "@refinedev/ui-types";
var Show = /* @__PURE__ */ __name(({
  title,
  canEdit,
  canDelete,
  isLoading = false,
  children,
  resource: resourceFromProps,
  recordItemId,
  breadcrumb: breadcrumbFromProps,
  dataProviderName,
  wrapperProps,
  headerProps,
  contentProps,
  headerButtonProps,
  headerButtons,
  footerButtonProps,
  footerButtons,
  goBack: goBackFromProps
}) => {
  var _a, _b, _c;
  const translate = useTranslate13();
  const {
    options: { breadcrumb: globalBreadcrumb } = {}
  } = useRefineContext7();
  const routerType = useRouterType14();
  const back = useBack3();
  const go = useGo3();
  const { goBack, list: legacyGoList } = useNavigation4();
  const getUserFriendlyName = useUserFriendlyName4();
  const {
    resource,
    action,
    id: idFromParams,
    identifier
  } = useResource5(resourceFromProps);
  const goListPath = useToPath2({
    resource,
    action: "list"
  });
  const id = recordItemId ?? idFromParams;
  const breadcrumb = typeof breadcrumbFromProps === "undefined" ? globalBreadcrumb : breadcrumbFromProps;
  const hasList = (resource == null ? void 0 : resource.list) && !recordItemId;
  const hasDelete = canDelete ?? ((_a = resource == null ? void 0 : resource.meta) == null ? void 0 : _a.canDelete) ?? (resource == null ? void 0 : resource.canDelete);
  const isDeleteButtonVisible = hasDelete && typeof id !== "undefined";
  const isEditButtonVisible = canEdit ?? (resource == null ? void 0 : resource.canEdit) ?? !!(resource == null ? void 0 : resource.edit);
  const breadcrumbComponent = typeof breadcrumb !== "undefined" ? /* @__PURE__ */ React27.createElement(React27.Fragment, null, breadcrumb) ?? void 0 : /* @__PURE__ */ React27.createElement(Breadcrumb, null);
  const listButtonProps = hasList ? {
    ...isLoading ? { disabled: true } : {},
    resource: routerType === "legacy" ? resource == null ? void 0 : resource.route : identifier
  } : void 0;
  const editButtonProps = isEditButtonVisible ? {
    ...isLoading ? { disabled: true } : {},
    resource: routerType === "legacy" ? resource == null ? void 0 : resource.route : identifier,
    recordItemId: id
  } : void 0;
  const deleteButtonProps = isDeleteButtonVisible ? {
    ...isLoading ? { disabled: true } : {},
    resource: routerType === "legacy" ? resource == null ? void 0 : resource.route : identifier,
    recordItemId: id,
    onSuccess: () => {
      if (routerType === "legacy") {
        legacyGoList((resource == null ? void 0 : resource.route) ?? (resource == null ? void 0 : resource.name) ?? "");
      } else {
        go({ to: goListPath });
      }
    },
    dataProviderName
  } : void 0;
  const refreshButtonProps = {
    ...isLoading ? { disabled: true } : {},
    resource: routerType === "legacy" ? resource == null ? void 0 : resource.route : identifier,
    recordItemId: id,
    dataProviderName
  };
  const defaultHeaderButtons = /* @__PURE__ */ React27.createElement(React27.Fragment, null, hasList && /* @__PURE__ */ React27.createElement(ListButton, { ...listButtonProps }), isEditButtonVisible && /* @__PURE__ */ React27.createElement(EditButton, { ...editButtonProps }), isDeleteButtonVisible && /* @__PURE__ */ React27.createElement(DeleteButton, { ...deleteButtonProps }), /* @__PURE__ */ React27.createElement(RefreshButton, { ...refreshButtonProps }));
  return /* @__PURE__ */ React27.createElement(Card9, { ...wrapperProps ?? {} }, breadcrumbComponent, /* @__PURE__ */ React27.createElement(
    CardHeader4,
    {
      sx: {
        display: "flex",
        flexWrap: "wrap",
        ".MuiCardHeader-action": {
          margin: 0,
          alignSelf: "center"
        }
      },
      title: title ?? /* @__PURE__ */ React27.createElement(
        Typography16,
        {
          variant: "h5",
          className: RefinePageHeaderClassNames4.Title
        },
        translate(
          `${identifier}.titles.show`,
          `Show ${getUserFriendlyName(
            ((_b = resource == null ? void 0 : resource.meta) == null ? void 0 : _b.label) ?? ((_c = resource == null ? void 0 : resource.options) == null ? void 0 : _c.label) ?? (resource == null ? void 0 : resource.label) ?? identifier,
            "singular"
          )}`
        )
      ),
      avatar: typeof goBackFromProps !== "undefined" ? goBackFromProps : /* @__PURE__ */ React27.createElement(
        IconButton8,
        {
          onClick: action !== "list" && typeof action !== "undefined" ? routerType === "legacy" ? goBack : back : void 0
        },
        /* @__PURE__ */ React27.createElement(ArrowBackIcon3, null)
      ),
      action: /* @__PURE__ */ React27.createElement(Box15, { display: "flex", gap: "16px", ...headerButtonProps ?? {} }, headerButtons ? typeof headerButtons === "function" ? headerButtons({
        defaultButtons: defaultHeaderButtons,
        deleteButtonProps,
        editButtonProps,
        listButtonProps,
        refreshButtonProps
      }) : headerButtons : defaultHeaderButtons),
      ...headerProps ?? {}
    }
  ), /* @__PURE__ */ React27.createElement(CardContent9, { ...contentProps ?? {} }, children), /* @__PURE__ */ React27.createElement(CardActions3, { sx: { padding: "16px" }, ...footerButtonProps ?? {} }, footerButtons ? typeof footerButtons === "function" ? footerButtons({ defaultButtons: null }) : footerButtons : null));
}, "Show");

// src/components/buttons/create/index.tsx
import React28 from "react";
import { useCreateButton } from "@refinedev/core";
import {
  RefineButtonClassNames,
  RefineButtonTestIds
} from "@refinedev/ui-types";
import Button10 from "@mui/material/Button";
import AddBoxOutlined from "@mui/icons-material/esm/AddBoxOutlined";
var CreateButton = /* @__PURE__ */ __name(({
  resource: resourceNameFromProps,
  resourceNameOrRouteName,
  hideText = false,
  accessControl,
  svgIconProps,
  meta,
  children,
  onClick,
  ...rest
}) => {
  const { to, label, title, disabled, hidden, LinkComponent } = useCreateButton(
    {
      resource: resourceNameFromProps ?? resourceNameOrRouteName,
      meta,
      accessControl
    }
  );
  if (hidden)
    return null;
  const { sx, ...restProps } = rest;
  return /* @__PURE__ */ React28.createElement(
    LinkComponent,
    {
      to,
      replace: false,
      onClick: (e) => {
        if (disabled) {
          e.preventDefault();
          return;
        }
        if (onClick) {
          e.preventDefault();
          onClick(e);
        }
      },
      style: { textDecoration: "none" }
    },
    /* @__PURE__ */ React28.createElement(
      Button10,
      {
        disabled,
        startIcon: !hideText && /* @__PURE__ */ React28.createElement(AddBoxOutlined, { ...svgIconProps }),
        title,
        variant: "contained",
        sx: { minWidth: 0, ...sx },
        
        className: RefineButtonClassNames.CreateButton,
        ...restProps
      },
      hideText ? /* @__PURE__ */ React28.createElement(AddBoxOutlined, { fontSize: "small", ...svgIconProps }) : children ?? label
    )
  );
}, "CreateButton");

// src/components/buttons/edit/index.tsx
import React29 from "react";
import { useEditButton } from "@refinedev/core";
import {
  RefineButtonClassNames as RefineButtonClassNames2,
  RefineButtonTestIds as RefineButtonTestIds2
} from "@refinedev/ui-types";
import Button11 from "@mui/material/Button";
import EditOutlined from "@mui/icons-material/esm/EditOutlined";
var EditButton = /* @__PURE__ */ __name(({
  resource: resourceNameFromProps,
  resourceNameOrRouteName,
  recordItemId,
  hideText = false,
  accessControl,
  svgIconProps,
  meta,
  children,
  onClick,
  ...rest
}) => {
  const { to, label, title, hidden, disabled, LinkComponent } = useEditButton({
    resource: resourceNameFromProps ?? resourceNameOrRouteName,
    id: recordItemId,
    accessControl,
    meta
  });
  if (hidden)
    return null;
  const { sx, ...restProps } = rest;
  return /* @__PURE__ */ React29.createElement(
    LinkComponent,
    {
      to,
      replace: false,
      onClick: (e) => {
        if (disabled) {
          e.preventDefault();
          return;
        }
        if (onClick) {
          e.preventDefault();
          onClick(e);
        }
      },
      style: { textDecoration: "none" }
    },
    /* @__PURE__ */ React29.createElement(
      Button11,
      {
        disabled,
        startIcon: !hideText && /* @__PURE__ */ React29.createElement(EditOutlined, { sx: { selfAlign: "center" }, ...svgIconProps }),
        title,
        sx: { minWidth: 0, ...sx },
        
        className: RefineButtonClassNames2.EditButton,
        ...restProps
      },
      hideText ? /* @__PURE__ */ React29.createElement(EditOutlined, { fontSize: "small", ...svgIconProps }) : children ?? label
    )
  );
}, "EditButton");

// src/components/buttons/delete/index.tsx
import React30 from "react";
import { useDeleteButton } from "@refinedev/core";
import {
  RefineButtonClassNames as RefineButtonClassNames3,
  RefineButtonTestIds as RefineButtonTestIds3
} from "@refinedev/ui-types";
import Button12 from "@mui/material/Button";
import Dialog from "@mui/material/Dialog";
import DialogActions from "@mui/material/DialogActions";
import DialogTitle from "@mui/material/DialogTitle";
import LoadingButton from "@mui/lab/LoadingButton";
import DeleteOutline from "@mui/icons-material/esm/DeleteOutline";
var DeleteButton = /* @__PURE__ */ __name(({
  resource: resourceNameFromProps,
  resourceNameOrRouteName,
  recordItemId,
  onSuccess,
  mutationMode,
  children,
  successNotification,
  errorNotification,
  hideText = false,
  accessControl,
  meta,
  metaData,
  dataProviderName,
  confirmTitle,
  confirmOkText,
  confirmCancelText,
  svgIconProps,
  invalidates,
  ...rest
}) => {
  const {
    onConfirm,
    title,
    label,
    hidden,
    disabled,
    loading,
    confirmTitle: defaultConfirmTitle,
    confirmOkLabel,
    cancelLabel
  } = useDeleteButton({
    resource: resourceNameFromProps ?? resourceNameOrRouteName,
    id: recordItemId,
    dataProviderName,
    mutationMode,
    accessControl,
    invalidates,
    onSuccess,
    meta,
    successNotification,
    errorNotification
  });
  const [open, setOpen] = React30.useState(false);
  const { sx, ...restProps } = rest;
  if (hidden)
    return null;
  return /* @__PURE__ */ React30.createElement("div", null, /* @__PURE__ */ React30.createElement(
    LoadingButton,
    {
      color: "error",
      onClick: () => setOpen(true),
      disabled,
      loading,
      startIcon: !hideText && /* @__PURE__ */ React30.createElement(DeleteOutline, { ...svgIconProps }),
      title,
      sx: { minWidth: 0, ...sx },
      loadingPosition: hideText ? "center" : "start",
      
      className: RefineButtonClassNames3.DeleteButton,
      ...restProps
    },
    hideText ? /* @__PURE__ */ React30.createElement(DeleteOutline, { fontSize: "small", ...svgIconProps }) : children ?? label
  ), /* @__PURE__ */ React30.createElement(
    Dialog,
    {
      open,
      onClose: () => setOpen(false),
      "aria-labelledby": "alert-dialog-title",
      "aria-describedby": "alert-dialog-description"
    },
    /* @__PURE__ */ React30.createElement(DialogTitle, { id: "alert-dialog-title" }, confirmTitle ?? defaultConfirmTitle),
    /* @__PURE__ */ React30.createElement(DialogActions, { sx: { justifyContent: "center" } }, /* @__PURE__ */ React30.createElement(Button12, { onClick: () => setOpen(false) }, confirmCancelText ?? cancelLabel), /* @__PURE__ */ React30.createElement(
      Button12,
      {
        color: "error",
        onClick: () => {
          onConfirm();
          setOpen(false);
        },
        autoFocus: true
      },
      confirmOkText ?? confirmOkLabel
    ))
  ));
}, "DeleteButton");

// src/components/buttons/refresh/index.tsx
import React31 from "react";
import { useRefreshButton } from "@refinedev/core";
import {
  RefineButtonClassNames as RefineButtonClassNames4,
  RefineButtonTestIds as RefineButtonTestIds4
} from "@refinedev/ui-types";
import LoadingButton2 from "@mui/lab/LoadingButton";
import RefreshOutlined from "@mui/icons-material/esm/RefreshOutlined";
var RefreshButton = /* @__PURE__ */ __name(({
  resource: resourceNameFromProps,
  resourceNameOrRouteName,
  recordItemId,
  hideText = false,
  dataProviderName,
  svgIconProps,
  children,
  onClick,
  meta: _meta,
  metaData: _metaData,
  ...rest
}) => {
  const {
    onClick: onRefresh,
    loading,
    label
  } = useRefreshButton({
    resource: resourceNameFromProps ?? resourceNameOrRouteName,
    id: recordItemId,
    dataProviderName
  });
  const { sx, ...restProps } = rest;
  return /* @__PURE__ */ React31.createElement(
    LoadingButton2,
    {
      startIcon: !hideText && /* @__PURE__ */ React31.createElement(RefreshOutlined, { ...svgIconProps }),
      loading,
      loadingPosition: hideText ? "center" : "start",
      onClick: onClick ? onClick : onRefresh,
      sx: { minWidth: 0, ...sx },
      
      className: RefineButtonClassNames4.RefreshButton,
      ...restProps
    },
    hideText ? /* @__PURE__ */ React31.createElement(RefreshOutlined, { fontSize: "small", ...svgIconProps }) : children ?? label
  );
}, "RefreshButton");

// src/components/buttons/show/index.tsx
import React32 from "react";
import { useShowButton } from "@refinedev/core";
import {
  RefineButtonClassNames as RefineButtonClassNames5,
  RefineButtonTestIds as RefineButtonTestIds5
} from "@refinedev/ui-types";
import Button13 from "@mui/material/Button";
import VisibilityOutlined from "@mui/icons-material/esm/VisibilityOutlined";
var ShowButton = /* @__PURE__ */ __name(({
  resource: resourceNameFromProps,
  resourceNameOrRouteName,
  recordItemId,
  hideText = false,
  accessControl,
  svgIconProps,
  meta,
  children,
  onClick,
  ...rest
}) => {
  const { to, label, title, hidden, disabled, LinkComponent } = useShowButton({
    resource: resourceNameFromProps ?? resourceNameOrRouteName,
    id: recordItemId,
    accessControl,
    meta
  });
  if (hidden)
    return null;
  const { sx, ...restProps } = rest;
  return /* @__PURE__ */ React32.createElement(
    LinkComponent,
    {
      to,
      replace: false,
      onClick: (e) => {
        if (disabled) {
          e.preventDefault();
          return;
        }
        if (onClick) {
          e.preventDefault();
          onClick(e);
        }
      },
      style: { textDecoration: "none" }
    },
    /* @__PURE__ */ React32.createElement(
      Button13,
      {
        disabled,
        startIcon: !hideText && /* @__PURE__ */ React32.createElement(VisibilityOutlined, { ...svgIconProps }),
        title,
        sx: { minWidth: 0, ...sx },
        
        className: RefineButtonClassNames5.ShowButton,
        ...restProps
      },
      hideText ? /* @__PURE__ */ React32.createElement(VisibilityOutlined, { fontSize: "small", ...svgIconProps }) : children ?? label
    )
  );
}, "ShowButton");

// src/components/buttons/list/index.tsx
import React33 from "react";
import { useListButton } from "@refinedev/core";
import {
  RefineButtonClassNames as RefineButtonClassNames6,
  RefineButtonTestIds as RefineButtonTestIds6
} from "@refinedev/ui-types";
import Button14 from "@mui/material/Button";
import ListOutlined4 from "@mui/icons-material/esm/ListOutlined";
var ListButton = /* @__PURE__ */ __name(({
  resource: resourceNameFromProps,
  resourceNameOrRouteName,
  hideText = false,
  accessControl,
  svgIconProps,
  meta,
  children,
  onClick,
  ...rest
}) => {
  const { to, label, title, hidden, disabled, LinkComponent } = useListButton({
    resource: resourceNameFromProps ?? resourceNameOrRouteName,
    meta,
    accessControl
  });
  if (hidden)
    return null;
  const { sx, ...restProps } = rest;
  return /* @__PURE__ */ React33.createElement(
    LinkComponent,
    {
      to,
      replace: false,
      onClick: (e) => {
        if (disabled) {
          e.preventDefault();
          return;
        }
        if (onClick) {
          e.preventDefault();
          onClick(e);
        }
      },
      style: { textDecoration: "none" }
    },
    /* @__PURE__ */ React33.createElement(
      Button14,
      {
        disabled,
        startIcon: !hideText && /* @__PURE__ */ React33.createElement(ListOutlined4, { ...svgIconProps }),
        title,
        sx: { minWidth: 0, ...sx },
        
        className: RefineButtonClassNames6.ListButton,
        ...restProps
      },
      hideText ? /* @__PURE__ */ React33.createElement(ListOutlined4, { fontSize: "small", ...svgIconProps }) : children ?? label
    )
  );
}, "ListButton");

// src/components/buttons/export/index.tsx
import React34 from "react";
import { useExportButton } from "@refinedev/core";
import {
  RefineButtonClassNames as RefineButtonClassNames7,
  RefineButtonTestIds as RefineButtonTestIds7
} from "@refinedev/ui-types";
import LoadingButton3 from "@mui/lab/LoadingButton";
import ImportExportOutlined from "@mui/icons-material/esm/ImportExportOutlined";
var ExportButton = /* @__PURE__ */ __name(({
  hideText = false,
  children,
  loading = false,
  svgIconProps,
  ...rest
}) => {
  const { label } = useExportButton();
  const { sx, ...restProps } = rest;
  return /* @__PURE__ */ React34.createElement(
    LoadingButton3,
    {
      ...rest,
      loading,
      startIcon: !hideText && /* @__PURE__ */ React34.createElement(ImportExportOutlined, { ...svgIconProps }),
      loadingPosition: hideText ? "center" : "start",
      sx: { minWidth: 0, ...sx },
      
      className: RefineButtonClassNames7.ExportButton,
      ...restProps
    },
    hideText ? /* @__PURE__ */ React34.createElement(ImportExportOutlined, { fontSize: "small", ...svgIconProps }) : children ?? label
  );
}, "ExportButton");

// src/components/buttons/save/index.tsx
import React35 from "react";
import { useSaveButton } from "@refinedev/core";
import {
  RefineButtonClassNames as RefineButtonClassNames8,
  RefineButtonTestIds as RefineButtonTestIds8
} from "@refinedev/ui-types";
import LoadingButton4 from "@mui/lab/LoadingButton";
import SaveOutlined from "@mui/icons-material/esm/SaveOutlined";
var SaveButton = /* @__PURE__ */ __name(({
  hideText = false,
  svgIconProps,
  children,
  ...rest
}) => {
  const { label } = useSaveButton();
  const { sx, ...restProps } = rest;
  return /* @__PURE__ */ React35.createElement(
    LoadingButton4,
    {
      startIcon: !hideText && /* @__PURE__ */ React35.createElement(SaveOutlined, { ...svgIconProps }),
      sx: { minWidth: 0, ...sx },
      variant: "contained",
      
      className: RefineButtonClassNames8.SaveButton,
      ...restProps
    },
    hideText ? /* @__PURE__ */ React35.createElement(SaveOutlined, { fontSize: "small", ...svgIconProps }) : children ?? label
  );
}, "SaveButton");

// src/components/buttons/clone/index.tsx
import React36 from "react";
import { useCloneButton } from "@refinedev/core";
import {
  RefineButtonClassNames as RefineButtonClassNames9,
  RefineButtonTestIds as RefineButtonTestIds9
} from "@refinedev/ui-types";
import Button15 from "@mui/material/Button";
import AddBoxOutlined2 from "@mui/icons-material/esm/AddBoxOutlined";
var CloneButton = /* @__PURE__ */ __name(({
  resource: resourceNameFromProps,
  resourceNameOrRouteName,
  recordItemId,
  hideText = false,
  accessControl,
  svgIconProps,
  meta,
  children,
  onClick,
  ...rest
}) => {
  const { to, label, title, hidden, disabled, LinkComponent } = useCloneButton({
    resource: resourceNameFromProps ?? resourceNameOrRouteName,
    id: recordItemId,
    meta,
    accessControl
  });
  if (hidden)
    return null;
  const { sx, ...restProps } = rest;
  return /* @__PURE__ */ React36.createElement(
    LinkComponent,
    {
      to,
      replace: false,
      onClick: (e) => {
        if (disabled) {
          e.preventDefault();
          return;
        }
        if (onClick) {
          e.preventDefault();
          onClick(e);
        }
      },
      style: { textDecoration: "none" }
    },
    /* @__PURE__ */ React36.createElement(
      Button15,
      {
        disabled,
        startIcon: !hideText && /* @__PURE__ */ React36.createElement(AddBoxOutlined2, { ...svgIconProps }),
        title,
        sx: { minWidth: 0, ...sx },
        
        className: RefineButtonClassNames9.CloneButton,
        ...restProps
      },
      hideText ? /* @__PURE__ */ React36.createElement(AddBoxOutlined2, { fontSize: "small", ...svgIconProps }) : children ?? label
    )
  );
}, "CloneButton");

// src/components/buttons/import/index.tsx
import React37 from "react";
import { useImportButton } from "@refinedev/core";
import {
  RefineButtonClassNames as RefineButtonClassNames10,
  RefineButtonTestIds as RefineButtonTestIds10
} from "@refinedev/ui-types";
import LoadingButton5 from "@mui/lab/LoadingButton";
import ImportExportOutlined2 from "@mui/icons-material/esm/ImportExportOutlined";
var ImportButton = /* @__PURE__ */ __name(({
  inputProps,
  hideText = false,
  loading = false,
  svgIconProps,
  children,
  ...rest
}) => {
  const { label } = useImportButton();
  const { sx, ...restProps } = rest;
  return /* @__PURE__ */ React37.createElement("label", { htmlFor: "contained-button-file" }, /* @__PURE__ */ React37.createElement("input", { ...inputProps, id: "contained-button-file", multiple: true, hidden: true }), /* @__PURE__ */ React37.createElement(
    LoadingButton5,
    {
      component: "span",
      startIcon: !hideText && /* @__PURE__ */ React37.createElement(ImportExportOutlined2, { ...svgIconProps }),
      loadingPosition: hideText ? "center" : "start",
      loading,
      sx: { minWidth: 0, ...sx },
      
      className: RefineButtonClassNames10.ImportButton,
      ...restProps
    },
    hideText ? /* @__PURE__ */ React37.createElement(ImportExportOutlined2, { fontSize: "small", ...svgIconProps }) : children ?? label
  ));
}, "ImportButton");

// src/components/circularDeterminate/index.tsx
import React38, { useState as useState8, useEffect as useEffect2 } from "react";
import Box16 from "@mui/material/Box";
import CircularProgress from "@mui/material/CircularProgress";
import Typography17 from "@mui/material/Typography";
var CircularDeterminate = /* @__PURE__ */ __name(({
  undoableTimeout,
  message
}) => {
  const [progress, setProgress] = useState8(100);
  const [timeCount, setTimeCount] = useState8(undoableTimeout);
  useEffect2(() => {
    const increaseProgress = 100 / undoableTimeout;
    const timer = setInterval(() => {
      setTimeCount((prevProgress) => prevProgress - 1);
      setProgress((prevProgress) => prevProgress - increaseProgress);
    }, 1e3);
    if (timeCount === 0) {
      clearInterval(timer);
    }
    return () => {
      clearInterval(timer);
    };
  }, [timeCount]);
  return /* @__PURE__ */ React38.createElement(React38.Fragment, null, /* @__PURE__ */ React38.createElement(Box16, { sx: { position: "relative", display: "inline-flex" } }, /* @__PURE__ */ React38.createElement(
    CircularProgress,
    {
      color: "inherit",
      variant: "determinate",
      value: progress
    }
  ), /* @__PURE__ */ React38.createElement(
    Box16,
    {
      sx: {
        top: 0,
        left: 0,
        bottom: 0,
        right: 0,
        position: "absolute",
        display: "flex",
        alignItems: "center",
        justifyContent: "center"
      }
    },
    /* @__PURE__ */ React38.createElement(Typography17, { component: "div" }, timeCount)
  )), /* @__PURE__ */ React38.createElement(
    Box16,
    {
      sx: {
        marginLeft: "10px",
        maxWidth: { xs: "150px", md: "100%" }
      }
    },
    /* @__PURE__ */ React38.createElement(Typography17, { variant: "subtitle2" }, message)
  ));
}, "CircularDeterminate");

// src/components/fields/text/index.tsx
import React39 from "react";
import Typography18 from "@mui/material/Typography";
var TextField6 = /* @__PURE__ */ __name(({ value, ...rest }) => {
  return /* @__PURE__ */ React39.createElement(Typography18, { variant: "body2", ...rest }, value);
}, "TextField");

// src/components/fields/tag/index.tsx
import React40 from "react";
import Chip from "@mui/material/Chip";
var TagField = /* @__PURE__ */ __name(({ value, ...rest }) => {
  return /* @__PURE__ */ React40.createElement(Chip, { label: value == null ? void 0 : value.toString(), ...rest });
}, "TagField");

// src/components/fields/email/index.tsx
import React41 from "react";
import Typography19 from "@mui/material/Typography";
import Link3 from "@mui/material/Link";
var EmailField = /* @__PURE__ */ __name(({ value, ...rest }) => {
  return /* @__PURE__ */ React41.createElement(Typography19, { variant: "body2" }, /* @__PURE__ */ React41.createElement(Link3, { href: `mailto:${value}`, ...rest }, value));
}, "EmailField");

// src/components/fields/boolean/index.tsx
import React42 from "react";
import Tooltip5 from "@mui/material/Tooltip";
import CheckOutlined from "@mui/icons-material/esm/CheckOutlined";
import CloseOutlined from "@mui/icons-material/esm/CloseOutlined";
var BooleanField = /* @__PURE__ */ __name(({
  value,
  valueLabelTrue = "true",
  valueLabelFalse = "false",
  trueIcon,
  falseIcon,
  svgIconProps,
  ...rest
}) => {
  return /* @__PURE__ */ React42.createElement(Tooltip5, { title: value ? valueLabelTrue : valueLabelFalse, ...rest }, value ? /* @__PURE__ */ React42.createElement("span", null, trueIcon ?? /* @__PURE__ */ React42.createElement(CheckOutlined, { ...svgIconProps })) : /* @__PURE__ */ React42.createElement("span", null, falseIcon ?? /* @__PURE__ */ React42.createElement(CloseOutlined, { ...svgIconProps })));
}, "BooleanField");

// src/components/fields/date/index.tsx
import React43 from "react";
import dayjs from "dayjs";
import LocalizedFormat from "dayjs/plugin/localizedFormat.js";
import Typography20 from "@mui/material/Typography";
dayjs.extend(LocalizedFormat);
var defaultLocale = dayjs.locale();
var DateField = /* @__PURE__ */ __name(({
  value,
  locales,
  format: dateFormat = "L",
  ...rest
}) => {
  return /* @__PURE__ */ React43.createElement(Typography20, { variant: "body2", ...rest }, value ? dayjs(value).locale(locales || defaultLocale).format(dateFormat) : "");
}, "DateField");

// src/components/fields/file/index.tsx
import React44 from "react";
var FileField = /* @__PURE__ */ __name(({
  title,
  src,
  ...rest
}) => {
  return /* @__PURE__ */ React44.createElement(UrlField, { value: src, title, ...rest }, title ?? src);
}, "FileField");

// src/components/fields/url/index.tsx
import React45 from "react";
import Link4 from "@mui/material/Link";
import Typography21 from "@mui/material/Typography";
var UrlField = /* @__PURE__ */ __name(({
  children,
  value,
  ...rest
}) => {
  return /* @__PURE__ */ React45.createElement(Typography21, { variant: "body2" }, /* @__PURE__ */ React45.createElement(Link4, { href: value, ...rest }, children ?? value));
}, "UrlField");

// src/components/fields/number/index.tsx
import React46 from "react";
import Typography22 from "@mui/material/Typography";
function toLocaleStringSupportsOptions() {
  return !!(typeof Intl === "object" && Intl && typeof Intl.NumberFormat === "function");
}
__name(toLocaleStringSupportsOptions, "toLocaleStringSupportsOptions");
var NumberField = /* @__PURE__ */ __name(({
  value,
  locale,
  options,
  ...rest
}) => {
  const number = Number(value);
  return /* @__PURE__ */ React46.createElement(Typography22, { variant: "body2", ...rest }, toLocaleStringSupportsOptions() ? number.toLocaleString(locale, options) : number);
}, "NumberField");

// src/components/fields/markdown/index.tsx
import React47 from "react";
import ReactMarkdown from "react-markdown";
import gfm from "remark-gfm";
var MarkdownField = /* @__PURE__ */ __name(({ value = "" }) => {
  return /* @__PURE__ */ React47.createElement(
    ReactMarkdown,
    {
      remarkPlugins: [gfm]
    },
    value
  );
}, "MarkdownField");

// src/components/breadcrumb/index.tsx
import React48 from "react";
import {
  matchResourceFromRoute,
  useBreadcrumb,
  useLink as useLink10,
  useRefineContext as useRefineContext8,
  useResource as useResource6,
  useRouterContext as useRouterContext10,
  useRouterType as useRouterType15
} from "@refinedev/core";
import Breadcrumbs from "@mui/material/Breadcrumbs";
import Typography23 from "@mui/material/Typography";
import Link5 from "@mui/material/Link";
import Grid3 from "@mui/material/Grid";
import HomeOutlined from "@mui/icons-material/esm/HomeOutlined";
var Breadcrumb = /* @__PURE__ */ __name(({
  breadcrumbProps,
  showHome = true,
  hideIcons = false,
  meta
}) => {
  var _a, _b;
  const { breadcrumbs } = useBreadcrumb({ meta });
  const routerType = useRouterType15();
  const NewLink = useLink10();
  const { Link: LegacyLink } = useRouterContext10();
  const ActiveLink = routerType === "legacy" ? LegacyLink : NewLink;
  const { hasDashboard } = useRefineContext8();
  const { resources } = useResource6();
  const rootRouteResource = matchResourceFromRoute("/", resources);
  if (breadcrumbs.length === 1) {
    return null;
  }
  const LinkRouter = /* @__PURE__ */ __name((props) => /* @__PURE__ */ React48.createElement(Link5, { ...props, component: ActiveLink }), "LinkRouter");
  return /* @__PURE__ */ React48.createElement(
    Breadcrumbs,
    {
      "aria-label": "breadcrumb",
      sx: {
        paddingY: 2,
        paddingX: 2,
        ...(breadcrumbProps == null ? void 0 : breadcrumbProps.sx) ?? {}
      },
      ...breadcrumbProps
    },
    showHome && (hasDashboard || rootRouteResource.found) && /* @__PURE__ */ React48.createElement(
      LinkRouter,
      {
        underline: "hover",
        sx: {
          display: "flex",
          alignItems: "center"
        },
        color: "inherit",
        to: "/"
      },
      ((_b = (_a = rootRouteResource == null ? void 0 : rootRouteResource.resource) == null ? void 0 : _a.meta) == null ? void 0 : _b.icon) ?? /* @__PURE__ */ React48.createElement(
        HomeOutlined,
        {
          sx: {
            fontSize: "18px"
          }
        }
      )
    ),
    breadcrumbs.map(({ label, icon, href }) => {
      return /* @__PURE__ */ React48.createElement(
        Grid3,
        {
          key: label,
          sx: {
            display: "flex",
            alignItems: "center",
            "& .MuiSvgIcon-root": {
              fontSize: "16px"
            }
          }
        },
        !hideIcons && icon,
        href ? /* @__PURE__ */ React48.createElement(
          LinkRouter,
          {
            underline: "hover",
            sx: {
              display: "flex",
              alignItems: "center",
              fontSize: "14px"
            },
            color: "inherit",
            to: href,
            variant: "subtitle1",
            marginLeft: 0.5
          },
          label
        ) : /* @__PURE__ */ React48.createElement(Typography23, { fontSize: "14px" }, label)
      );
    })
  );
}, "Breadcrumb");

// src/components/autoSaveIndicator/index.tsx
import React49 from "react";
import {
  useTranslate as useTranslate14,
  AutoSaveIndicator as AutoSaveIndicatorCore
} from "@refinedev/core";
import Typography24 from "@mui/material/Typography";
import MoreHorizOutlinedIcon from "@mui/icons-material/esm/MoreHorizOutlined";
import SyncOutlinedIcon from "@mui/icons-material/esm/SyncOutlined";
import TaskAltOutlinedIcon from "@mui/icons-material/esm/TaskAltOutlined";
import ErrorOutlineOutlinedIcon from "@mui/icons-material/esm/ErrorOutlineOutlined";
var AutoSaveIndicator = /* @__PURE__ */ __name(({
  status,
  elements: {
    success = /* @__PURE__ */ React49.createElement(
      Message,
      {
        translationKey: "autoSave.success",
        defaultMessage: "saved",
        icon: /* @__PURE__ */ React49.createElement(TaskAltOutlinedIcon, { fontSize: "small" })
      }
    ),
    error = /* @__PURE__ */ React49.createElement(
      Message,
      {
        translationKey: "autoSave.error",
        defaultMessage: "auto save failure",
        icon: /* @__PURE__ */ React49.createElement(ErrorOutlineOutlinedIcon, { fontSize: "small" })
      }
    ),
    loading = /* @__PURE__ */ React49.createElement(
      Message,
      {
        translationKey: "autoSave.loading",
        defaultMessage: "saving...",
        icon: /* @__PURE__ */ React49.createElement(SyncOutlinedIcon, { fontSize: "small" })
      }
    ),
    idle = /* @__PURE__ */ React49.createElement(
      Message,
      {
        translationKey: "autoSave.idle",
        defaultMessage: "waiting for changes",
        icon: /* @__PURE__ */ React49.createElement(MoreHorizOutlinedIcon, { fontSize: "small" })
      }
    )
  } = {}
}) => {
  return /* @__PURE__ */ React49.createElement(
    AutoSaveIndicatorCore,
    {
      status,
      elements: {
        success,
        error,
        loading,
        idle
      }
    }
  );
}, "AutoSaveIndicator");
var Message = /* @__PURE__ */ __name(({
  translationKey,
  defaultMessage,
  icon
}) => {
  const translate = useTranslate14();
  return /* @__PURE__ */ React49.createElement(
    Typography24,
    {
      color: "gray",
      fontSize: "0.8rem",
      position: "relative",
      display: "flex",
      alignItems: "center",
      flexWrap: "wrap",
      marginRight: ".3rem"
    },
    translate(translationKey, defaultMessage),
    /* @__PURE__ */ React49.createElement("span", { style: { position: "relative", top: "3px", marginLeft: "3px" } }, icon)
  );
}, "Message");

// src/theme/index.ts
import { createTheme } from "@mui/material/styles";

// src/theme/palette/lightPalette.ts
var lightPalette = {
  mode: "light",
  primary: {
    main: "#67be23",
    contrastText: "#fff"
  },
  secondary: {
    main: "#2A132E",
    contrastText: "#fff"
  },
  background: {
    default: "#f0f0f0",
    paper: "#ffffff"
  },
  success: {
    main: "#67be23",
    contrastText: "#fff"
  },
  error: {
    main: "#fa541c",
    contrastText: "#fff"
  },
  warning: {
    main: "#fa8c16",
    contrastText: "#fff"
  },
  info: {
    main: "#0b82f0",
    contrastText: "#fff"
  },
  divider: "rgba(0,0,0,0)",
  text: {
    primary: "#626262",
    secondary: "#9f9f9f",
    disabled: "#c1c1c1"
  }
};

// src/theme/palette/darkPalette.ts
var darkPalette = {
  mode: "dark",
  primary: {
    main: "#67be23",
    contrastText: "#fff"
  },
  secondary: {
    main: "#2A132E",
    contrastText: "#fff"
  },
  background: {
    default: "#212121",
    paper: "#242424"
  },
  success: {
    main: "#67be23",
    contrastText: "#fff"
  },
  error: {
    main: "#ee2a1e",
    contrastText: "#fff"
  },
  warning: {
    main: "#fa8c16",
    contrastText: "#fff"
  },
  info: {
    main: "#1890ff",
    contrastText: "#fff"
  },
  divider: "rgba(0,0,0,0)",
  text: {
    primary: "#fff",
    secondary: "rgba(255,255,255,0.7)",
    disabled: "#d1d1d1"
  }
};

// src/theme/typography.ts
var typography = {
  fontFamily: [
    "Montserrat",
    "-apple-system",
    "BlinkMacSystemFont",
    '"Segoe UI"',
    "Roboto",
    '"Helvetica Neue"',
    "Arial",
    "sans-serif",
    '"Apple Color Emoji"',
    '"Segoe UI Emoji"',
    '"Segoe UI Symbol"'
  ].join(",")
};

// src/theme/palette/refinePalette.ts
var RefinePalettes = {
  Blue: {
    mode: "light",
    primary: {
      main: "#1976D2",
      light: "#4791db",
      dark: "#115293"
    }
  },
  BlueDark: {
    mode: "dark",
    primary: {
      main: "#67b7f7",
      light: "#85c5f8",
      dark: "#4880ac"
    }
  },
  Purple: {
    mode: "light",
    primary: {
      main: "#7B1FA2",
      light: "#954bb4",
      dark: "#561571"
    }
  },
  PurpleDark: {
    mode: "dark",
    primary: {
      main: "#AB47BC",
      light: "#bb6bc9",
      dark: "#773183"
    }
  },
  Magenta: {
    mode: "light",
    primary: {
      main: "#C2185B",
      light: "#ce467b",
      dark: "#87103f"
    }
  },
  MagentaDark: {
    mode: "dark",
    primary: {
      main: "#EC407A",
      light: "#ef6694",
      dark: "#a52c55"
    }
  },
  Red: {
    mode: "light",
    primary: {
      main: "#D32F2F",
      light: "#db5858",
      dark: "#932020"
    }
  },
  RedDark: {
    mode: "dark",
    primary: {
      main: "#EF5350",
      light: "#f27573",
      dark: "#a73a38"
    }
  },
  Orange: {
    mode: "light",
    primary: {
      main: "#F57C00",
      light: "#f79633",
      dark: "#ab5600"
    }
  },
  OrangeDark: {
    mode: "dark",
    primary: {
      main: "#FFA726",
      light: "#ffb851",
      dark: "#b2741a"
    }
  },
  Yellow: {
    mode: "light",
    primary: {
      main: "#FFA000",
      light: "#ffb333",
      dark: "#b27000"
    }
  },
  YellowDark: {
    mode: "dark",
    primary: {
      main: "#FFCA28",
      light: "#ffd453",
      dark: "#E87040"
    }
  },
  Green: {
    mode: "light",
    primary: {
      main: "#689F38",
      light: "#86b25f",
      dark: "#486f27"
    }
  },
  GreenDark: {
    mode: "dark",
    primary: {
      main: "#9CCC65",
      light: "#afd683",
      dark: "#6d8e46"
    }
  }
};

// src/theme/index.ts
var commonThemeProperties = {
  shape: {
    borderRadius: 6
  },
  typography: {
    ...typography
  }
};
var LightTheme = createTheme({
  ...commonThemeProperties,
  palette: lightPalette,
  components: {
    MuiAppBar: {
      styleOverrides: {
        colorDefault: {
          backgroundColor: "#fff"
        }
      }
    },
    MuiPaper: {
      styleOverrides: {
        root: {
          backgroundImage: "linear-gradient(rgba(255, 255, 255, 0.01), rgba(255, 255, 255, 0.01))"
        }
      }
    },
    MuiTypography: {
      styleOverrides: {
        h5: {
          fontWeight: 800,
          lineHeight: "2rem"
        }
      }
    }
  }
});
var DarkTheme = createTheme({
  ...commonThemeProperties,
  palette: darkPalette,
  components: {
    MuiPaper: {
      styleOverrides: {
        root: {
          backgroundImage: "linear-gradient(rgba(255, 255, 255, 0.025), rgba(255, 255, 255, 0.025))"
        }
      }
    },
    MuiAppBar: {
      defaultProps: {
        color: "transparent"
      }
    },
    MuiTypography: {
      styleOverrides: {
        h5: {
          fontWeight: 800,
          lineHeight: "2rem"
        }
      }
    }
  }
});
var RefineThemes = Object.keys(RefinePalettes).reduce((acc, key) => {
  const paletteName = key;
  return {
    ...acc,
    [key]: createTheme({
      palette: {
        ...RefinePalettes[paletteName]
      },
      components: {
        MuiButton: {
          styleOverrides: {
            root: ({ ownerState }) => ({
              ...ownerState.variant === "contained" && ownerState.color === "primary" && {
                color: "#fff"
              }
            })
          }
        }
      }
    })
  };
}, {});

// src/providers/notificationProvider/index.tsx
import React50 from "react";
import { useSnackbar } from "notistack";
import Box17 from "@mui/material/Box";
import IconButton9 from "@mui/material/IconButton";
import Typography25 from "@mui/material/Typography";
import UndoOutlined from "@mui/icons-material/esm/UndoOutlined";
var useNotificationProvider = /* @__PURE__ */ __name(() => {
  const { closeSnackbar, enqueueSnackbar } = useSnackbar();
  const notificationProvider2 = {
    open: ({
      message,
      type,
      undoableTimeout,
      key,
      cancelMutation,
      description
    }) => {
      if (type === "progress") {
        const action = /* @__PURE__ */ __name((key2) => /* @__PURE__ */ React50.createElement(
          IconButton9,
          {
            onClick: () => {
              cancelMutation == null ? void 0 : cancelMutation();
              closeSnackbar(key2);
            },
            color: "inherit"
          },
          /* @__PURE__ */ React50.createElement(UndoOutlined, null)
        ), "action");
        enqueueSnackbar(
          /* @__PURE__ */ React50.createElement(React50.Fragment, null, /* @__PURE__ */ React50.createElement(
            CircularDeterminate,
            {
              undoableTimeout: undoableTimeout ?? 0,
              message
            }
          )),
          {
            action,
            preventDuplicate: true,
            key,
            autoHideDuration: (undoableTimeout ?? 0) * 1e3
          }
        );
      } else {
        enqueueSnackbar(
          /* @__PURE__ */ React50.createElement(Box17, null, /* @__PURE__ */ React50.createElement(Typography25, { variant: "subtitle2", component: "h6" }, description), /* @__PURE__ */ React50.createElement(Typography25, { variant: "caption", component: "p" }, message)),
          {
            key,
            variant: type
          }
        );
      }
    },
    close: (key) => {
      closeSnackbar(key);
    }
  };
  return notificationProvider2;
}, "useNotificationProvider");
var notificationProvider = useNotificationProvider;

// src/providers/refineSnackbarProvider/index.tsx
import React51 from "react";
import { styled } from "@mui/material/styles";
import { SnackbarProvider } from "notistack";
var SnackbarProviderWithDefaultValues = /* @__PURE__ */ __name(({
  anchorOrigin = {
    vertical: "top",
    horizontal: "right"
  },
  disableWindowBlurListener = true,
  ...rest
}) => {
  return /* @__PURE__ */ React51.createElement(
    SnackbarProvider,
    {
      anchorOrigin,
      disableWindowBlurListener,
      ...rest
    }
  );
}, "SnackbarProviderWithDefaultValues");
var RefineSnackbarProvider = styled(SnackbarProviderWithDefaultValues)`
&.SnackbarItem-contentRoot {
    background-color: ${(props) => props.theme.palette.background.default};
    color: ${(props) => props.theme.palette.primary.main};
}
&.SnackbarItem-variantSuccess {
    background-color: ${(props) => props.theme.palette.success.main};
    color: ${(props) => props.theme.palette.success.contrastText};
}
&.SnackbarItem-variantError {
    background-color: ${(props) => props.theme.palette.error.main};
    color: ${(props) => props.theme.palette.error.contrastText};
}
&.SnackbarItem-variantInfo {
    background-color: ${(props) => props.theme.palette.info.main};
    color: ${(props) => props.theme.palette.info.contrastText};
}
&.SnackbarItem-variantWarning {
    background-color: ${(props) => props.theme.palette.warning.main};
    color: ${(props) => props.theme.palette.warning.contrastText};
}
`;
export {
  AuthPage,
  AutoSaveIndicator,
  BooleanField,
  Breadcrumb,
  CircularDeterminate,
  CloneButton,
  Create,
  CreateButton,
  DarkTheme,
  DateField,
  DeleteButton,
  Edit,
  EditButton,
  EmailField,
  ErrorComponent,
  ExportButton,
  FileField,
  HamburgerMenu,
  Header,
  ImportButton,
  Layout,
  LightTheme,
  List4 as List,
  ListButton,
  LoginPage,
  MarkdownField,
  SnackbarContent as NotistackSnackbarContent,
  NumberField,
  ReadyPage,
  RefineSnackbarProvider,
  RefineThemes,
  RefreshButton,
  SaveButton,
  Show,
  ShowButton,
  Sider,
  SnackbarProvider2 as SnackbarProvider,
  TagField,
  TextField6 as TextFieldComponent,
  ThemedHeader,
  ThemedHeaderV2,
  ThemedLayout,
  ThemedLayoutContext,
  ThemedLayoutContextProvider,
  ThemedLayoutV2,
  ThemedSider,
  ThemedSiderV2,
  ThemedTitle,
  ThemedTitleV2,
  Title,
  UrlField,
  WelcomePage,
  notificationProvider,
  useAutocomplete,
  useDataGrid,
  useNotificationProvider,
  useSiderVisible,
  useSnackbar2 as useSnackbar,
  useThemedLayoutContext,
  withSnackbar
};
//# sourceMappingURL=index.mjs.map