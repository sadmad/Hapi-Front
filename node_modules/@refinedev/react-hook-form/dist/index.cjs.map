{"version":3,"sources":["../src/index.ts","../src/useForm/index.ts","../src/useStepsForm/index.ts","../src/useModalForm/index.ts"],"sourcesContent":["export { useForm, UseFormProps, UseFormReturnType } from \"./useForm/index.js\";\nexport {\n  useStepsForm,\n  UseStepsFormProps,\n  UseStepsFormReturnType,\n} from \"./useStepsForm/index.js\";\nexport {\n  useModalForm,\n  UseModalFormProps,\n  UseModalFormReturnType,\n} from \"./useModalForm/index.js\";\n","import React, { useEffect } from \"react\";\nimport get from \"lodash/get\";\nimport has from \"lodash/has\";\n\nimport {\n  useForm as useHookForm,\n  type UseFormProps as UseHookFormProps,\n  type UseFormReturn,\n  type FieldValues,\n  type UseFormHandleSubmit,\n  type Path,\n} from \"react-hook-form\";\nimport {\n  type BaseRecord,\n  type HttpError,\n  useForm as useFormCore,\n  useWarnAboutChange,\n  type UseFormProps as UseFormCoreProps,\n  type UseFormReturnType as UseFormReturnTypeCore,\n  useTranslate,\n  useRefineContext,\n  flattenObjectKeys,\n} from \"@refinedev/core\";\n\nexport type UseFormReturnType<\n  TQueryFnData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n  TVariables extends FieldValues = FieldValues,\n  TContext extends object = {},\n  TData extends BaseRecord = TQueryFnData,\n  TResponse extends BaseRecord = TData,\n  TResponseError extends HttpError = TError,\n> = UseFormReturn<TVariables, TContext> & {\n  refineCore: UseFormReturnTypeCore<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n  >;\n  saveButtonProps: {\n    disabled: boolean;\n    onClick: (e: React.BaseSyntheticEvent) => void;\n  };\n};\n\nexport type UseFormProps<\n  TQueryFnData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n  TVariables extends FieldValues = FieldValues,\n  TContext extends object = {},\n  TData extends BaseRecord = TQueryFnData,\n  TResponse extends BaseRecord = TData,\n  TResponseError extends HttpError = TError,\n> = {\n  /**\n   * Configuration object for the core of the [useForm](/docs/api-reference/core/hooks/useForm/)\n   * @type [`UseFormCoreProps<TQueryFnData, TError, TVariables, TData, TResponse, TResponseError>`](/docs/api-reference/core/hooks/useForm/#properties)\n   */\n  refineCoreProps?: UseFormCoreProps<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n  >;\n  /**\n   * When you have unsaved changes and try to leave the current page, **refine** shows a confirmation modal box.\n   * @default `false*`\n   */\n  warnWhenUnsavedChanges?: boolean;\n  /**\n   * Disables server-side validation\n   * @default false\n   * @see {@link https://refine.dev/docs/advanced-tutorials/forms/server-side-form-validation/}\n   */\n  disableServerSideValidation?: boolean;\n} & UseHookFormProps<TVariables, TContext>;\n\nexport const useForm = <\n  TQueryFnData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n  TVariables extends FieldValues = FieldValues,\n  TContext extends object = {},\n  TData extends BaseRecord = TQueryFnData,\n  TResponse extends BaseRecord = TData,\n  TResponseError extends HttpError = TError,\n>({\n  refineCoreProps,\n  warnWhenUnsavedChanges: warnWhenUnsavedChangesProp,\n  disableServerSideValidation: disableServerSideValidationProp = false,\n  ...rest\n}: UseFormProps<\n  TQueryFnData,\n  TError,\n  TVariables,\n  TContext,\n  TData,\n  TResponse,\n  TResponseError\n> = {}): UseFormReturnType<\n  TQueryFnData,\n  TError,\n  TVariables,\n  TContext,\n  TData,\n  TResponse,\n  TResponseError\n> => {\n  const { options } = useRefineContext();\n  const disableServerSideValidation =\n    options?.disableServerSideValidation || disableServerSideValidationProp;\n\n  const translate = useTranslate();\n\n  const { warnWhenUnsavedChanges: warnWhenUnsavedChangesRefine, setWarnWhen } =\n    useWarnAboutChange();\n  const warnWhenUnsavedChanges =\n    warnWhenUnsavedChangesProp ?? warnWhenUnsavedChangesRefine;\n\n  const useHookFormResult = useHookForm<TVariables, TContext>({\n    ...rest,\n  });\n\n  const {\n    watch,\n    setValue,\n    getValues,\n    handleSubmit: handleSubmitReactHookForm,\n    setError,\n  } = useHookFormResult;\n\n  const useFormCoreResult = useFormCore<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TData,\n    TResponse,\n    TResponseError\n  >({\n    ...refineCoreProps,\n    onMutationError: (error, _variables, _context) => {\n      if (disableServerSideValidation) {\n        refineCoreProps?.onMutationError?.(error, _variables, _context);\n        return;\n      }\n\n      const errors = error?.errors;\n\n      for (const key in errors) {\n        // when the key is not registered in the form, react-hook-form not working\n        const isKeyInVariables = Object.keys(\n          flattenObjectKeys(_variables),\n        ).includes(key);\n\n        if (!isKeyInVariables) {\n          continue;\n        }\n\n        const fieldError = errors[key];\n\n        let newError = \"\";\n\n        if (Array.isArray(fieldError)) {\n          newError = fieldError.join(\" \");\n        }\n\n        if (typeof fieldError === \"string\") {\n          newError = fieldError;\n        }\n\n        if (typeof fieldError === \"boolean\" && fieldError) {\n          newError = \"Field is not valid.\";\n        }\n\n        if (typeof fieldError === \"object\" && \"key\" in fieldError) {\n          const translatedMessage = translate(\n            fieldError.key,\n            fieldError.message,\n          );\n\n          newError = translatedMessage;\n        }\n\n        setError(key as Path<TVariables>, {\n          message: newError,\n        });\n      }\n\n      refineCoreProps?.onMutationError?.(error, _variables, _context);\n    },\n  });\n\n  const { query, onFinish, formLoading, onFinishAutoSave } = useFormCoreResult;\n\n  useEffect(() => {\n    const data = query?.data?.data;\n    if (!data) return;\n\n    /**\n     * get registered fields from react-hook-form\n     */\n    const registeredFields = Object.keys(flattenObjectKeys(getValues()));\n\n    /**\n     * set values from query result as default values\n     */\n    registeredFields.forEach((path) => {\n      const hasValue = has(data, path);\n      const dataValue = get(data, path);\n\n      /**\n       * set value if the path exists in the query result even if the value is null\n       */\n      if (hasValue) {\n        setValue(path as Path<TVariables>, dataValue);\n      }\n    });\n  }, [query?.data, setValue, getValues]);\n\n  useEffect(() => {\n    const subscription = watch((values: any, { type }: { type?: any }) => {\n      if (type === \"change\") {\n        onValuesChange(values);\n      }\n    });\n    return () => subscription.unsubscribe();\n  }, [watch]);\n\n  const onValuesChange = (changeValues: TVariables) => {\n    if (warnWhenUnsavedChanges) {\n      setWarnWhen(true);\n    }\n\n    if (refineCoreProps?.autoSave) {\n      setWarnWhen(false);\n\n      const onFinishProps =\n        refineCoreProps.autoSave?.onFinish ?? ((values: TVariables) => values);\n\n      return onFinishAutoSave(onFinishProps(changeValues)).catch(\n        (error) => error,\n      );\n    }\n\n    return changeValues;\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TVariables> =\n    (onValid, onInvalid) => async (e) => {\n      setWarnWhen(false);\n      return handleSubmitReactHookForm(onValid, onInvalid)(e);\n    };\n\n  const saveButtonProps = {\n    disabled: formLoading,\n    onClick: (e: React.BaseSyntheticEvent) => {\n      handleSubmit(\n        (v) => onFinish(v).catch(() => {}),\n        () => false,\n      )(e);\n    },\n  };\n\n  return {\n    ...useHookFormResult,\n    handleSubmit,\n    refineCore: useFormCoreResult,\n    saveButtonProps,\n  };\n};\n","import { useEffect, useState } from \"react\";\nimport type { FieldValues, Path } from \"react-hook-form\";\nimport type { BaseRecord, HttpError } from \"@refinedev/core\";\nimport get from \"lodash/get\";\n\nimport { useForm, type UseFormProps, type UseFormReturnType } from \"../useForm\";\n\nexport type UseStepsFormReturnType<\n  TQueryFnData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n  TVariables extends FieldValues = FieldValues,\n  TContext extends object = {},\n  TData extends BaseRecord = TQueryFnData,\n  TResponse extends BaseRecord = TData,\n  TResponseError extends HttpError = TError,\n> = UseFormReturnType<\n  TQueryFnData,\n  TError,\n  TVariables,\n  TContext,\n  TData,\n  TResponse,\n  TResponseError\n> & {\n  steps: {\n    currentStep: number;\n    gotoStep: (step: number) => void;\n  };\n};\n\nexport type UseStepsFormProps<\n  TQueryFnData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n  TVariables extends FieldValues = FieldValues,\n  TContext extends object = {},\n  TData extends BaseRecord = TQueryFnData,\n  TResponse extends BaseRecord = TData,\n  TResponseError extends HttpError = TError,\n> = UseFormProps<\n  TQueryFnData,\n  TError,\n  TVariables,\n  TContext,\n  TData,\n  TResponse,\n  TResponseError\n> & {\n  /**\n     * @description Configuration object for the steps.\n     * `defaultStep`: Allows you to set the initial step.\n     * \n     * `isBackValidate`: Whether to validation the current step when going back.\n     * @type `{\n      defaultStep?: number;\n      isBackValidate?: boolean;\n      }`\n     * @default `defaultStep = 0` `isBackValidate = false`\n     */\n  stepsProps?: {\n    defaultStep?: number;\n    isBackValidate?: boolean;\n  };\n};\n\nexport const useStepsForm = <\n  TQueryFnData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n  TVariables extends FieldValues = FieldValues,\n  TContext extends object = {},\n  TData extends BaseRecord = TQueryFnData,\n  TResponse extends BaseRecord = TData,\n  TResponseError extends HttpError = TError,\n>({\n  stepsProps,\n  ...rest\n}: UseStepsFormProps<\n  TQueryFnData,\n  TError,\n  TVariables,\n  TContext,\n  TData,\n  TResponse,\n  TResponseError\n> = {}): UseStepsFormReturnType<\n  TQueryFnData,\n  TError,\n  TVariables,\n  TContext,\n  TData,\n  TResponse,\n  TResponseError\n> => {\n  const { defaultStep = 0, isBackValidate = false } = stepsProps ?? {};\n  const [current, setCurrent] = useState(defaultStep);\n\n  const useHookFormResult = useForm<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TContext,\n    TData,\n    TResponse,\n    TResponseError\n  >({\n    ...rest,\n  });\n\n  const {\n    trigger,\n    getValues,\n    setValue,\n    formState: { dirtyFields },\n    refineCore: { query },\n  } = useHookFormResult;\n\n  useEffect(() => {\n    const data = query?.data?.data;\n    if (!data) return;\n\n    const registeredFields = Object.keys(getValues());\n\n    console.log({\n      dirtyFields,\n      registeredFields,\n      data,\n    });\n\n    Object.entries(data).forEach(([key, value]) => {\n      const name = key as Path<TVariables>;\n\n      if (registeredFields.includes(name)) {\n        if (!get(dirtyFields, name)) {\n          setValue(name, value);\n        }\n      }\n    });\n  }, [query?.data, current, setValue, getValues]);\n\n  const go = (step: number) => {\n    let targetStep = step;\n\n    if (step < 0) {\n      targetStep = 0;\n    }\n\n    setCurrent(targetStep);\n  };\n\n  const gotoStep = async (step: number) => {\n    if (step === current) {\n      return;\n    }\n\n    if (step < current && !isBackValidate) {\n      go(step);\n      return;\n    }\n\n    const isValid = await trigger();\n    if (isValid) {\n      go(step);\n    }\n  };\n\n  return {\n    ...useHookFormResult,\n    steps: {\n      currentStep: current,\n      gotoStep,\n    },\n  };\n};\n","import { useCallback } from \"react\";\nimport {\n  type BaseKey,\n  type BaseRecord,\n  type FormWithSyncWithLocationParams,\n  type HttpError,\n  useGo,\n  useModal,\n  useParsed,\n  useResource,\n  useUserFriendlyName,\n  useTranslate,\n  useWarnAboutChange,\n  useInvalidate,\n} from \"@refinedev/core\";\nimport type { FieldValues } from \"react-hook-form\";\n\nimport { useForm, type UseFormProps, type UseFormReturnType } from \"../useForm\";\nimport React from \"react\";\n\nexport type UseModalFormReturnType<\n  TQueryFnData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n  TVariables extends FieldValues = FieldValues,\n  TContext extends object = {},\n  TData extends BaseRecord = TQueryFnData,\n  TResponse extends BaseRecord = TData,\n  TResponseError extends HttpError = TError,\n> = UseFormReturnType<\n  TQueryFnData,\n  TError,\n  TVariables,\n  TContext,\n  TData,\n  TResponse,\n  TResponseError\n> & {\n  modal: {\n    submit: (values: TVariables) => void;\n    close: () => void;\n    show: (id?: BaseKey) => void;\n    visible: boolean;\n    title: string;\n  };\n};\n\nexport type UseModalFormProps<\n  TQueryFnData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n  TVariables extends FieldValues = FieldValues,\n  TContext extends object = {},\n  TData extends BaseRecord = TQueryFnData,\n  TResponse extends BaseRecord = TData,\n  TResponseError extends HttpError = TError,\n> = UseFormProps<\n  TQueryFnData,\n  TError,\n  TVariables,\n  TContext,\n  TData,\n  TResponse,\n  TResponseError\n> & {\n  /**\n     * @description Configuration object for the modal.\n     * `defaultVisible`: Initial visibility state of the modal.\n     * \n     * `autoSubmitClose`: Whether the form should be submitted when the modal is closed.\n     * \n     * `autoResetForm`: Whether the form should be reset when the form is submitted.\n     * @type `{\n      defaultVisible?: boolean;\n      autoSubmitClose?: boolean;\n      autoResetForm?: boolean;\n      }`\n     * @default `defaultVisible = false` `autoSubmitClose = true` `autoResetForm = true`\n     */\n  modalProps?: {\n    defaultVisible?: boolean;\n    autoSubmitClose?: boolean;\n    autoResetForm?: boolean;\n  };\n} & FormWithSyncWithLocationParams;\n\nexport const useModalForm = <\n  TQueryFnData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n  TVariables extends FieldValues = FieldValues,\n  TContext extends object = {},\n  TData extends BaseRecord = TQueryFnData,\n  TResponse extends BaseRecord = TData,\n  TResponseError extends HttpError = TError,\n>({\n  modalProps,\n  refineCoreProps,\n  syncWithLocation,\n  ...rest\n}: UseModalFormProps<\n  TQueryFnData,\n  TError,\n  TVariables,\n  TContext,\n  TData,\n  TResponse,\n  TResponseError\n> = {}): UseModalFormReturnType<\n  TQueryFnData,\n  TError,\n  TVariables,\n  TContext,\n  TData,\n  TResponse,\n  TResponseError\n> => {\n  const invalidate = useInvalidate();\n  const [initiallySynced, setInitiallySynced] = React.useState(false);\n\n  const translate = useTranslate();\n\n  const { resource: resourceProp, action: actionProp } = refineCoreProps ?? {};\n\n  const {\n    resource,\n    action: actionFromParams,\n    identifier,\n  } = useResource(resourceProp);\n\n  const parsed = useParsed();\n  const go = useGo();\n  const getUserFriendlyName = useUserFriendlyName();\n\n  const action = actionProp ?? actionFromParams ?? \"\";\n\n  const syncingId = !(\n    typeof syncWithLocation === \"object\" && syncWithLocation?.syncId === false\n  );\n\n  const syncWithLocationKey =\n    typeof syncWithLocation === \"object\" && \"key\" in syncWithLocation\n      ? syncWithLocation.key\n      : resource && action && syncWithLocation\n        ? `modal-${identifier}-${action}`\n        : undefined;\n\n  const {\n    defaultVisible = false,\n    autoSubmitClose = true,\n    autoResetForm = true,\n  } = modalProps ?? {};\n\n  const useHookFormResult = useForm<\n    TQueryFnData,\n    TError,\n    TVariables,\n    TContext,\n    TData,\n    TResponse,\n    TResponseError\n  >({\n    refineCoreProps: {\n      ...refineCoreProps,\n      meta: {\n        ...(syncWithLocationKey ? { [syncWithLocationKey]: undefined } : {}),\n        ...refineCoreProps?.meta,\n      },\n    },\n    ...rest,\n  });\n\n  const {\n    reset,\n    refineCore: { onFinish, id, setId, autoSaveProps },\n    saveButtonProps,\n    handleSubmit,\n  } = useHookFormResult;\n\n  const { visible, show, close } = useModal({\n    defaultVisible,\n  });\n\n  React.useEffect(() => {\n    if (initiallySynced === false && syncWithLocationKey) {\n      const openStatus = parsed?.params?.[syncWithLocationKey]?.open;\n      if (typeof openStatus === \"boolean\") {\n        if (openStatus) {\n          show();\n        }\n      } else if (typeof openStatus === \"string\") {\n        if (openStatus === \"true\") {\n          show();\n        }\n      }\n\n      if (syncingId) {\n        const idFromParams = parsed?.params?.[syncWithLocationKey]?.id;\n        if (idFromParams) {\n          setId?.(idFromParams);\n        }\n      }\n\n      setInitiallySynced(true);\n    }\n  }, [syncWithLocationKey, parsed, syncingId, setId]);\n\n  React.useEffect(() => {\n    if (initiallySynced === true) {\n      if (visible && syncWithLocationKey) {\n        go({\n          query: {\n            [syncWithLocationKey]: {\n              ...parsed?.params?.[syncWithLocationKey],\n              open: true,\n              ...(syncingId && id && { id }),\n            },\n          },\n          options: { keepQuery: true },\n          type: \"replace\",\n        });\n      } else if (syncWithLocationKey && !visible) {\n        go({\n          query: {\n            [syncWithLocationKey]: undefined,\n          },\n          options: { keepQuery: true },\n          type: \"replace\",\n        });\n      }\n    }\n  }, [id, visible, show, syncWithLocationKey, syncingId]);\n\n  const submit = async (values: TVariables) => {\n    await onFinish(values);\n\n    if (autoSubmitClose) {\n      close();\n    }\n\n    if (autoResetForm) {\n      reset();\n    }\n  };\n\n  const { warnWhen, setWarnWhen } = useWarnAboutChange();\n  const handleClose = useCallback(() => {\n    if (\n      autoSaveProps.status === \"success\" &&\n      refineCoreProps?.autoSave?.invalidateOnClose\n    ) {\n      invalidate({\n        id,\n        invalidates: refineCoreProps.invalidates || [\"list\", \"many\", \"detail\"],\n        dataProviderName: refineCoreProps.dataProviderName,\n        resource: identifier,\n      });\n    }\n\n    if (warnWhen) {\n      const warnWhenConfirm = window.confirm(\n        translate(\n          \"warnWhenUnsavedChanges\",\n          \"Are you sure you want to leave? You have unsaved changes.\",\n        ),\n      );\n\n      if (warnWhenConfirm) {\n        setWarnWhen(false);\n      } else {\n        return;\n      }\n    }\n\n    setId?.(undefined);\n    close();\n  }, [warnWhen, autoSaveProps.status]);\n\n  const handleShow = useCallback(\n    (showId?: BaseKey) => {\n      if (typeof showId !== \"undefined\") {\n        setId?.(showId);\n      }\n      const needsIdToOpen = action === \"edit\" || action === \"clone\";\n      const hasId = typeof showId !== \"undefined\" || typeof id !== \"undefined\";\n      if (needsIdToOpen ? hasId : true) {\n        show();\n      }\n    },\n    [id],\n  );\n\n  const title = translate(\n    `${identifier}.titles.${actionProp}`,\n    undefined,\n    `${getUserFriendlyName(\n      `${actionProp} ${\n        resource?.meta?.label ??\n        resource?.options?.label ??\n        resource?.label ??\n        identifier\n      }`,\n      \"singular\",\n    )}`,\n  );\n\n  return {\n    modal: {\n      submit,\n      close: handleClose,\n      show: handleShow,\n      visible,\n      title,\n    },\n    ...useHookFormResult,\n    saveButtonProps: {\n      ...saveButtonProps,\n      onClick: (e) => handleSubmit(submit)(e),\n    },\n  };\n};\n"],"mappings":"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","names":["src_exports","__export","useForm","useModalForm","useStepsForm","__toCommonJS","import_react","import_get","import_has","import_react_hook_form","import_core","useForm","__name","refineCoreProps","warnWhenUnsavedChangesProp","disableServerSideValidationProp","rest","options","disableServerSideValidation","translate","warnWhenUnsavedChangesRefine","setWarnWhen","warnWhenUnsavedChanges","useHookFormResult","useHookForm","watch","setValue","getValues","handleSubmitReactHookForm","setError","useFormCoreResult","useFormCore","error","_variables","_context","_a","_b","errors","key","fieldError","newError","query","onFinish","formLoading","onFinishAutoSave","data","path","hasValue","has","dataValue","get","subscription","values","type","onValuesChange","changeValues","onFinishProps","handleSubmit","onValid","onInvalid","e","v","import_react","import_get","useStepsForm","__name","stepsProps","rest","defaultStep","isBackValidate","current","setCurrent","useHookFormResult","useForm","trigger","getValues","setValue","dirtyFields","query","_a","data","registeredFields","key","value","name","get","go","step","targetStep","import_react","import_core","import_react","useModalForm","__name","modalProps","refineCoreProps","syncWithLocation","rest","_a","_b","invalidate","initiallySynced","setInitiallySynced","React","translate","resourceProp","actionProp","resource","actionFromParams","identifier","parsed","go","getUserFriendlyName","action","syncingId","syncWithLocationKey","defaultVisible","autoSubmitClose","autoResetForm","useHookFormResult","useForm","reset","onFinish","id","setId","autoSaveProps","saveButtonProps","handleSubmit","visible","show","close","_c","_d","openStatus","idFromParams","submit","values","warnWhen","setWarnWhen","handleClose","handleShow","showId","title","e"]}