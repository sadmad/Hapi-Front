{"version":3,"sources":["../src/index.ts","../src/provider.ts","../src/utils/mapOperator.ts","../src/utils/generateSort.ts","../src/utils/generateFilter.ts","../src/utils/axios.ts"],"sourcesContent":["import { stringify } from \"query-string\";\nimport { dataProvider } from \"./provider.js\";\n\nexport default dataProvider;\n\nexport * from \"./utils/index.js\";\n\nexport { stringify };\n","import type { AxiosInstance } from \"axios\";\nimport { stringify } from \"query-string\";\nimport type { DataProvider } from \"@refinedev/core\";\nimport { axiosInstance, generateSort, generateFilter } from \"./utils\";\n\ntype MethodTypes = \"get\" | \"delete\" | \"head\" | \"options\";\ntype MethodTypesWithBody = \"post\" | \"put\" | \"patch\";\n\nexport const dataProvider = (\n  apiUrl: string,\n  httpClient: AxiosInstance = axiosInstance,\n): Omit<\n  Required<DataProvider>,\n  \"createMany\" | \"updateMany\" | \"deleteMany\"\n> => ({\n  getList: async ({ resource, pagination, filters, sorters, meta }) => {\n    const url = `${apiUrl}/${resource}`;\n\n    const { current = 1, pageSize = 10, mode = \"server\" } = pagination ?? {};\n\n    const { headers: headersFromMeta, method } = meta ?? {};\n    const requestMethod = (method as MethodTypes) ?? \"get\";\n\n    const queryFilters = generateFilter(filters);\n\n    const query: {\n      _start?: number;\n      _end?: number;\n      _sort?: string;\n      _order?: string;\n    } = {};\n\n    if (mode === \"server\") {\n      query._start = (current - 1) * pageSize;\n      query._end = current * pageSize;\n    }\n\n    const generatedSort = generateSort(sorters);\n    if (generatedSort) {\n      const { _sort, _order } = generatedSort;\n      query._sort = _sort.join(\",\");\n      query._order = _order.join(\",\");\n    }\n\n    const combinedQuery = { ...query, ...queryFilters };\n    const urlWithQuery = Object.keys(combinedQuery).length\n      ? `${url}?${stringify(combinedQuery)}`\n      : url;\n\n    const { data, headers } = await httpClient[requestMethod](urlWithQuery, {\n      headers: headersFromMeta,\n    });\n\n    const total = +headers[\"x-total-count\"];\n\n    return {\n      data,\n      total: total || data.length,\n    };\n  },\n\n  getMany: async ({ resource, ids, meta }) => {\n    const { headers, method } = meta ?? {};\n    const requestMethod = (method as MethodTypes) ?? \"get\";\n\n    const { data } = await httpClient[requestMethod](\n      `${apiUrl}/${resource}?${stringify({ id: ids })}`,\n      { headers },\n    );\n\n    return {\n      data,\n    };\n  },\n\n  create: async ({ resource, variables, meta }) => {\n    const url = `${apiUrl}/${resource}`;\n\n    const { headers, method } = meta ?? {};\n    const requestMethod = (method as MethodTypesWithBody) ?? \"post\";\n\n    const { data } = await httpClient[requestMethod](url, variables, {\n      headers,\n    });\n\n    return {\n      data,\n    };\n  },\n\n  update: async ({ resource, id, variables, meta }) => {\n    const url = `${apiUrl}/${resource}/${id}`;\n\n    const { headers, method } = meta ?? {};\n    const requestMethod = (method as MethodTypesWithBody) ?? \"patch\";\n\n    const { data } = await httpClient[requestMethod](url, variables, {\n      headers,\n    });\n\n    return {\n      data,\n    };\n  },\n\n  getOne: async ({ resource, id, meta }) => {\n    const url = `${apiUrl}/${resource}/${id}`;\n\n    const { headers, method } = meta ?? {};\n    const requestMethod = (method as MethodTypes) ?? \"get\";\n\n    const { data } = await httpClient[requestMethod](url, { headers });\n\n    return {\n      data,\n    };\n  },\n\n  deleteOne: async ({ resource, id, variables, meta }) => {\n    const url = `${apiUrl}/${resource}/${id}`;\n\n    const { headers, method } = meta ?? {};\n    const requestMethod = (method as MethodTypesWithBody) ?? \"delete\";\n\n    const { data } = await httpClient[requestMethod](url, {\n      data: variables,\n      headers,\n    });\n\n    return {\n      data,\n    };\n  },\n\n  getApiUrl: () => {\n    return apiUrl;\n  },\n\n  custom: async ({\n    url,\n    method,\n    filters,\n    sorters,\n    payload,\n    query,\n    headers,\n  }) => {\n    let requestUrl = `${url}?`;\n\n    if (sorters) {\n      const generatedSort = generateSort(sorters);\n      if (generatedSort) {\n        const { _sort, _order } = generatedSort;\n        const sortQuery = {\n          _sort: _sort.join(\",\"),\n          _order: _order.join(\",\"),\n        };\n        requestUrl = `${requestUrl}&${stringify(sortQuery)}`;\n      }\n    }\n\n    if (filters) {\n      const filterQuery = generateFilter(filters);\n      requestUrl = `${requestUrl}&${stringify(filterQuery)}`;\n    }\n\n    if (query) {\n      requestUrl = `${requestUrl}&${stringify(query)}`;\n    }\n\n    let axiosResponse;\n    switch (method) {\n      case \"put\":\n      case \"post\":\n      case \"patch\":\n        axiosResponse = await httpClient[method](url, payload, {\n          headers,\n        });\n        break;\n      case \"delete\":\n        axiosResponse = await httpClient.delete(url, {\n          data: payload,\n          headers: headers,\n        });\n        break;\n      default:\n        axiosResponse = await httpClient.get(requestUrl, {\n          headers,\n        });\n        break;\n    }\n\n    const { data } = axiosResponse;\n\n    return Promise.resolve({ data });\n  },\n});\n","import type { CrudOperators } from \"@refinedev/core\";\n\nexport const mapOperator = (operator: CrudOperators): string => {\n  switch (operator) {\n    case \"ne\":\n    case \"gte\":\n    case \"lte\":\n      return `_${operator}`;\n    case \"contains\":\n      return \"_like\";\n    default:\n      return \"\";\n  }\n};\n","import type { CrudSorting } from \"@refinedev/core\";\n\nexport const generateSort = (sorters?: CrudSorting) => {\n  if (sorters && sorters.length > 0) {\n    const _sort: string[] = [];\n    const _order: string[] = [];\n\n    sorters.map((item) => {\n      _sort.push(item.field);\n      _order.push(item.order);\n    });\n\n    return {\n      _sort,\n      _order,\n    };\n  }\n\n  return;\n};\n","import type { CrudFilters } from \"@refinedev/core\";\nimport { mapOperator } from \"./mapOperator\";\n\nexport const generateFilter = (filters?: CrudFilters) => {\n  const queryFilters: { [key: string]: string } = {};\n\n  if (filters) {\n    filters.map((filter) => {\n      if (filter.operator === \"or\" || filter.operator === \"and\") {\n        throw new Error(\n          `[@refinedev/simple-rest]: \\`operator: ${filter.operator}\\` is not supported. You can create custom data provider. https://refine.dev/docs/api-reference/core/providers/data-provider/#creating-a-data-provider`,\n        );\n      }\n\n      if (\"field\" in filter) {\n        const { field, operator, value } = filter;\n\n        if (field === \"q\") {\n          queryFilters[field] = value;\n          return;\n        }\n\n        const mappedOperator = mapOperator(operator);\n        queryFilters[`${field}${mappedOperator}`] = value;\n      }\n    });\n  }\n\n  return queryFilters;\n};\n","import type { HttpError } from \"@refinedev/core\";\nimport axios from \"axios\";\n\nconst axiosInstance = axios.create();\n\naxiosInstance.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    const customError: HttpError = {\n      ...error,\n      message: error.response?.data?.message,\n      statusCode: error.response?.status,\n    };\n\n    return Promise.reject(customError);\n  },\n);\n\nexport { axiosInstance };\n"],"mappings":"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","names":["src_exports","__export","axiosInstance","src_default","generateFilter","generateSort","mapOperator","__toCommonJS","import_query_string","import_query_string","mapOperator","operator","generateSort","sorters","_sort","_order","item","generateFilter","filters","queryFilters","filter","field","operator","value","mappedOperator","mapOperator","import_axios","axiosInstance","axios","response","error","_a","_b","_c","customError","dataProvider","apiUrl","httpClient","axiosInstance","resource","pagination","filters","sorters","meta","url","current","pageSize","mode","headersFromMeta","method","requestMethod","queryFilters","generateFilter","query","generatedSort","generateSort","_sort","_order","combinedQuery","urlWithQuery","data","headers","total","ids","variables","id","payload","requestUrl","sortQuery","filterQuery","axiosResponse","src_default","dataProvider"]}